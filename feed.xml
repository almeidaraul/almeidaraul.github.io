<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://almeidaraul.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://almeidaraul.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-11-23T00:26:33+00:00</updated><id>https://almeidaraul.github.io/feed.xml</id><title type="html">blank</title><subtitle>Computer Vision Researcher </subtitle><entry><title type="html"></title><link href="https://almeidaraul.github.io/blog/2023/2023-11-22-label-smoothing/" rel="alternate" type="text/html" title=""/><published>2023-11-23T00:26:33+00:00</published><updated>2023-11-23T00:26:33+00:00</updated><id>https://almeidaraul.github.io/blog/2023/2023-11-22-label-smoothing</id><content type="html" xml:base="https://almeidaraul.github.io/blog/2023/2023-11-22-label-smoothing/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>There are two explanations here: a short and a long one. I suggest you read both in this order, as the short one might provide an overview of what is going on.</p> <p>This all comes from the original paper by Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens and Zbigniew Wojna that proposed label smoothing as a regularization technique<d-cite key="resnet"></d-cite>.</p> <blockquote> <p>It is also important to note I am talking exclusively about classification in this article, so when you read “neural networks are fun” you should actually understand “<strong>classifier</strong> neural networks are fun”.</p> </blockquote> <h2 id="tldr-short-explanation">TL;DR (short explanation)</h2> <p>The general idea of optimizing a neural network’s weights during training is that you want the network’s answers for inputs of different classes to be as distant from one another as possible.</p> <p>Labels are usually represented in one-hot encoded vectors, where one value is equal to 1 and all others are equal to 0, representing the probability of each class (and, since this is ground truth, we know one class has probability 1 and all others have probability 0).</p> <p>Intuitively, the problem is that your model could learn to make the probability of the most likely class to be infinitely greater than the others’ (and understandably so, since 1 is infinitely greater than 0). This leads to a model that doesn’t adapt well yet feels pretty confident about its decisions (☢ overfitting, poor generalization ☢).</p> <p>Label smoothing consists of choosing an Epsilon value and changing the ground- truth labels <code class="language-plaintext highlighter-rouge">y</code> as follows:</p> <table> <tbody> <tr> <td>$y \gets (1-\epsilon)y + \frac{\epsilon}{</td> <td>y</td> <td>}$</td> </tr> </tbody> </table> <p>With this, nothing is infinitely greater than anything anymore, and your model learns to keep outputs adequate.</p> <h2 id="long-explanation">Long explanation</h2> <p>Now for the long explanation. I will follow the general structure of the authors’ explanation<d-cite key="resnet"></d-cite>, but in my eyes this is less straight to the point in order to make it easier to understand. Just like the authors, I will use the cross-entropy (CE) loss in my explanation.</p> <h3 id="the-problem">The problem</h3> <p>Let’s say you’re optimizing a neural network’s weights by minimizing the CE function over the softmax of its outputs and the expected outputs. There are a couple of things to notice here:</p> <ol> <li>Before the softmax function, your neural network outputs logits, which are unnormalized log-probabilities of each class.</li> <li>Logits are normalized with the softmax function so that your neural network’s predicted probability for class <code class="language-plaintext highlighter-rouge">k</code> is $\textrm{SoftMax}_k = \frac{e^{\textrm{logits}_k}}{\sum_i\log(p_k)\textrm{expected}_k}, i \in \textrm{classes}$</li> <li>With <code class="language-plaintext highlighter-rouge">p_j</code> as the predicted probability of class j and <code class="language-plaintext highlighter-rouge">expected_j</code> as the real probability of the same class, $\textrm{CELoss} = -(\sum_{k\in\textrm{classes}}\log(p_k)\textrm{expected}_k )$</li> </ol> <p>So we can conclude that if you’re minimizing CE, you’re aiming to maximize the log-likelihood of the correct label. <strong>You can’t maximize this with finite values of <code class="language-plaintext highlighter-rouge">logits[k]</code></strong>. You can, however, get pretty close by making <code class="language-plaintext highlighter-rouge">logits[true class] &gt;&gt; logits[i]</code> for all <code class="language-plaintext highlighter-rouge">i != true class</code>, i.e., by making the ground-truth class logit much greater than all others. If you’ve read the short explanation, this is what I meant by “infinitely greater”.</p> <p>Making the ground-truth class logit much greater than all others leads to two problems:</p> <p><strong>Overfitting.</strong> What your model is learning is to assign full probability to the class it expects to be true, which indicates a very strict learned representation.</p> <p><strong>Little adaptation capability.</strong> It is easy to see at this point that your model is encouraged to output logits so that the largest one is a lot different than all others. What’s important to notice here, is that the gradient $\frac{\partial\textrm{CELoss}}{\partial\textrm{true class logits}}$ is in the range <code class="language-plaintext highlighter-rouge">[-1, 1]</code>, which reduces the model’s ability to adapt. You can see this as encouraging the model to create very radical outputs and then not being able to make corresponding radical corrections in the optimization step (because the gradient doesn’t explode like the weights do).</p> <p>In summary, these two problems mean your <strong>model is too confident,</strong> which is the final problem that label smoothing solves.</p> <h3 id="the-solution">The solution</h3> <p>Now we need to solve this confidence issue with your model. What the authors<d-cite key="resnet"></d-cite> proposed is to change the ground-truth label <code class="language-plaintext highlighter-rouge">y</code> as follows:</p> <table> <tbody> <tr> <td>$y \gets (1-\epsilon)y + \frac{\epsilon}{</td> <td>y</td> <td>}$</td> </tr> </tbody> </table> <p>Or,</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y' = (1-epsilon)*y + epsilon/len(y)
</code></pre></div></div> <p>For a chosen <code class="language-plaintext highlighter-rouge">epsilon</code> value. With this change, if the estimated probability of a single class <code class="language-plaintext highlighter-rouge">k</code> gets very close to 1, all others will be very close to 0. Since no probability is “allowed” to actually equal to 0, the softmax output won’t explode, and the computed CE value will be large (i.e., this scenario will be avoided in the optimization process).</p> <p>That’s it! I hope you find this helpful.</p>]]></content><author><name></name></author></entry><entry><title type="html">posts to do</title><link href="https://almeidaraul.github.io/blog/2023/post-bibliography/" rel="alternate" type="text/html" title="posts to do"/><published>2023-08-27T22:30:00+00:00</published><updated>2023-08-27T22:30:00+00:00</updated><id>https://almeidaraul.github.io/blog/2023/post-bibliography</id><content type="html" xml:base="https://almeidaraul.github.io/blog/2023/post-bibliography/"><![CDATA[<p>Posts that I plan on writing/posting here (for those already written):</p> <ul> <li>Explanation of the SemEval paper</li> <li>Making sense of PyTest imports</li> <li>Finding/reading AI papers</li> <li>Label smoothing, explained</li> <li>Early stopping aux (as a post explaining early stopping)</li> <li>Please use markdown</li> <li>something about icpc br reg 2023 (campo grande)</li> </ul>]]></content><author><name></name></author><category term="todo"/><summary type="html"><![CDATA[posts that I plan on writing]]></summary></entry></feed>