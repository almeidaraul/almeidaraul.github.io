<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://almeidaraul.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://almeidaraul.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-23T22:00:01+00:00</updated><id>https://almeidaraul.github.io/feed.xml</id><title type="html">blank</title><subtitle>Computer Vision Researcher </subtitle><entry><title type="html">(PT-BR) Uma introdução informal ao Bitwarden</title><link href="https://almeidaraul.github.io/blog/2024/bitwarden/" rel="alternate" type="text/html" title="(PT-BR) Uma introdução informal ao Bitwarden"/><published>2024-03-27T00:35:00+00:00</published><updated>2024-03-27T00:35:00+00:00</updated><id>https://almeidaraul.github.io/blog/2024/bitwarden</id><content type="html" xml:base="https://almeidaraul.github.io/blog/2024/bitwarden/"><![CDATA[<p>Obs: <em>Este é um artigo que eu escrevi pra enviar às pessoas dos meus círculos sociais, porque como todo usuário de Bitwarden eu constantemente recomendo às pessoas que usem Bitwarden - não um gerenciador de senhas qualquer, o <strong>Bitwarden</strong>. Isto não é e nunca pretendeu ser uma descrição completa de gerenciadores de senha, mas sim uma apresentação informal ao tema.</em></p> <p>Obs2: Isso vai precisar de revisão no futuro</p> <p>Então você caiu na minha armadilha e decidiu se aventurar no mundo dos gerenciadores de senha. Parabéns, sua vida está a poucos passos de se tornar melhor. Antes de explicar como realmente usar esse negócio, eu vou lhe contar os motivos de querer usar, e como funciona. Se você quiser, pode pular lá pro final.</p> <h1 id="problemas-da-vida-sem-gerenciador-de-senha">Problemas da vida sem gerenciador de senha</h1> <p>Se você não usa um gerenciador de senha, eu vejo três opções pra a sua vida digital:</p> <ol> <li>Você usa entre uma e três senhas pra todos os sites e apps que acessa. Esse é o caso da maiorias das pessoas (juro)</li> <li>Você usa mais senhas, mas não tem uma distinta pra cada site que acessa. Esse é um caso menos comum.</li> <li>Você tem um sistema pra gerar uma senha a partir do serviço (por exemplo, manipulando o endereço do site ou informações sobre o serviço que ele presta). Eu já vi alguém que não era eu fazendo isso, então estou incluindo aqui pra caso você também faça.</li> </ol> <h2 id="1-menos-de-3-senhas-pra-tudo---caso-mais-comum-e-pior-caso">1: menos de 3 senhas pra tudo - caso mais comum e pior caso</h2> <p>Esse é o jeito menos seguro de usar a internet. Se um site onde você tem cadastro sofre um vazamento de informações (o que é <strong>muito</strong> comum), a primeira coisa que pessoas mal-intencionadas vão fazer é pegar essas informações e tentar usar em outros sites. Então se você, por exemplo, usa o mesmo email e senha no Facebook e no Twitter, e o Twitter tem as contas vazadas, alguém provavelmente vai pegar seu email e senha do Twitter (que vazaram) e tentar usar no Facebook, e aí a pessoa vai ter acesso à sua conta do Facebook. Isso é terrível.</p> <h2 id="2-mesmo-que-o-anterior-mas-com-mais-senhas">2: mesmo que o anterior, mas com mais senhas</h2> <p>Se você se enquadra na categoria 2, você pode até acreditar que está em mais segurança do que as pessoas da categoria 1, mas a realidade é que as chances de se dar mal são altíssimas do mesmo jeito. É melhor, mas não ajuda tanto assim.</p> <h2 id="3-você-usa-um-sistema">3: você usa um sistema</h2> <p>Se você usa um sistema pra gerar senhas, você é nerd o suficiente pra saber que já passou da hora de usar um gerenciador de senhas.</p> <p>A ideia do sistema é fazer uma função em cima do site/app pra obter a senha. Por exemplo, um sistema muito simples seria inverter o nome do site. Aí sua senha do Twitter seria rettiwT.</p> <p>Usar um sistema é horrível. Imagine que vazaram a sua conta do Twitter, e agora o mundo inteiro sabe que sua senha é rettiwT. Você precisa mudar a senha, mas se você mudar a senha vai ter que ser pra uma que não faz parte do sistema, e aí o seu sistema deixa de funcionar. Além disso, se o sistema é confortável o suficiente pra você conseguir gerar uma senha de cabeça, ter acesso a poucas senhas já deve revelar um padrão, e aí basta reunir algumas (em vez de uma, como nos casos anteriores) contas vazadas pra a pessoa maliciosa conseguir acessar suas contas.</p> <h2 id="não-é-só-sobre-a-quantidade-de-senhas">Não é só sobre a quantidade de senhas</h2> <p>Suas senhas são horríveis. Provavelmente você usa uma senha baseada em algum aspecto ou interesse seu (<code class="language-plaintext highlighter-rouge">starwars</code>), ou simplesmente um padrão ridículo (tipo <code class="language-plaintext highlighter-rouge">123456</code>). A senha de um amigo meu costumava ser <code class="language-plaintext highlighter-rouge">[nome dele]sk8</code>. Ele fez isso porque era uma criança. Não tome as decisões que essa criança tomava. Hoje em dia existem ferramentas muito eficazes pra fazer um perfil seu e adivinhar sua senha baseado em informações sobre a sua vida, então não importa o que você faça, se a senha vier da sua cabeça, ela é enviesada.</p> <h2 id="uma-nota-sobre-ouvir-teclas">Uma nota sobre ouvir teclas</h2> <p>Se você procurar na internet, vai ver que existem vírus que ouvem você digitando e calculam as teclas pressionadas pra descobrir sua senha. Tecnicamente um gerenciador de senhas resolve esse problema também, mas em teoria existiriam outras soluções pra fugir disso. Eu não me importo com esse problema.</p> <h1 id="como-gerenciadores-de-senha-funcionam">Como gerenciadores de senha funcionam</h1> <p>Um gerenciador de senhas, essencialmente, é uma caixa preta que contém todas as suas informações de login por você. Geralmente isso inclui uma ferramenta pra gerar senhas aleatórias de tamanho arbitrário e também uma ferramenta de auto-preencher (aí você não precisa copiar as senhas do gerenciador pra o site onde quer logar).</p> <p>A graça disso é que você pode ter senhas muito grandes e completamente aleatórias, uma pra cada site, e aí se algum site tiver as informações vazadas isso não afeta nenhuma das suas outras contas. Você só precisa lembrar da senha que usa no gerenciador de senhas, e ele lembra das outras por você.</p> <h1 id="mas-e-se-vazarem-as-informações-do-meu-gerenciador-de-senhas">Mas e se vazarem as informações do meu gerenciador de senhas?</h1> <p>Uma coisa que eu não revelei antes porque queria que você caísse na armadilha didática de fazer essa pergunta é que o único jeito de vazarem a sua senha é se ela for guardada em texto simples, isto é, sem ser criptografada. Uma senha criptografada parece um bando de lixo - abaixo eu coloquei um exemplo de criptografia da senha <code class="language-plaintext highlighter-rouge">senha</code>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>U2FsdGVkX1/SGXg12MFWD0VHZc759C1k+NLloiMU2KY=
</code></pre></div></div> <p>Se a sua senha criptografada vazar, ninguém consegue usar ela, a menos que o site que você usa estiver usando uma criptografia muito antiga (que é um problema muito real!)</p> <p>Nesse momento você talvez diga: “mas Raul, então não é só todos os sites da internet usarem sempre um algoritmo moderno de criptografia?” E a resposta é sim, mas eu te prometo que sempre vai ter um site ruim/antigo/mal feito/com um problema novo que ninguém descobriu ainda. Então nos sobra uma solução: vamos deixar todas as nossas senhas em <strong>um site</strong> que use sempre um algoritmo moderno de criptografia. Essa é a ideia do gerenciador de senhas.</p> <p>Se você usar qualquer gerenciador de senhas decente, as senhas vão estar cifradas no banco de dados deles. Resumindo, isso de vazarem informações não é um problema.</p> <h1 id="como-o-bitwarden-é-melhor-do-que-o-resto">Como o Bitwarden é melhor do que o resto</h1> <p>O Bitwarden é código aberto. Isso significa que tem milhares de nerds de segurança da informação que ficam inspecionando o código pra garantir que funciona direito. Ele está presente em basicamente qualquer sistema operacional pra dispositivos móveis ou computadores, e tem uma comunidade amigável. Por fim, ele é de graça pra uso pessoal. É o melhor que você pode pedir.</p> <h1 id="usando-o-bitwarden">Usando o Bitwarden</h1> <p>Basicamente, você vai <a href="https://vault.bitwarden.com/#/register?layout=default">criar uma conta</a> (não crie ainda! eu vou explicar uma coisa lá embaixo sobre escolher sua senha do bitwarden), baixar o aplicativo de celular, e instalar a extensão no seu navegador do computador (firefox, edge, chrome, etc). Links pra todas essas coisas estão disponíveis <a href="https://bitwarden.com/download/">aqui</a>.</p> <p>Depois é só usar: você usa o <em>vault</em> pra encontrar suas contas salvas e salvar novas contas, e o gerador pra gerar senhas aleatórias.</p> <div class="row"> <div class="col"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/bitwarden_ss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/bitwarden_ss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/bitwarden_ss-1400.webp"/> <img src="/assets/img/bitwarden_ss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Algumas coisas da interface do Bitwarden </div> <h2 id="escolhendo-uma-senha-para-o-seu-gerenciador-de-senhas">Escolhendo uma senha para o seu gerenciador de senhas</h2> <p>Antes de você criar uma conta, você precisa escolher uma boa senha. Siga minhas instruções e vai dar tudo certo:</p> <ol> <li>Procure um gerador de palavras aleatórias na internet. Qualquer um serve, por exemplo, o primeiro resultado na minha pesquisa foi <a href="https://www.palavrasaleatorias.com">esse aqui</a>.</li> <li>Gere uma lista de palavras aleatórias e escolha entre 3 e 5, que juntas tenham pelo menos uns 16 caracteres. Seguindo o exemplo, digamos que as palavras foram <code class="language-plaintext highlighter-rouge">manusear</code>, <code class="language-plaintext highlighter-rouge">amor</code> e <code class="language-plaintext highlighter-rouge">demolir</code></li> <li>Junte elas em um palavrão só: <code class="language-plaintext highlighter-rouge">manusearamordemolir</code></li> <li>Insira pontuação e caracteres especiais no meio das palavras: <code class="language-plaintext highlighter-rouge">manuse!aramo,rdemoli1r</code>. Nesse ponto, a graça é quebrar a palavra pra evitar ataques de dicionário, que ficam tentando usar palavras comuns e suas variações pra descobrir sua senha (por exemplo, <code class="language-plaintext highlighter-rouge">demolir</code>, <code class="language-plaintext highlighter-rouge">d3m0l1r</code>,<code class="language-plaintext highlighter-rouge">DEMOLIR</code>)</li> <li>Pronto, você tem uma senha!</li> </ol> <h2 id="e-se-eu-morrer-e-ninguém-da-minha-família-tiver-acesso-às-minhas-contas-porque-eu-fui-obcecado-por-segurança-da-informação">E se eu morrer e ninguém da minha família tiver acesso às minhas contas porque eu fui obcecado por segurança da informação?</h2> <p>Quebre sua senha em duas metades e entregue elas pra duas pessoas de confiança que não têm contato. Diga que se algum dia você morrer, a outra pessoa tem a outra metade.</p> <h1 id="uma-nota-sobre-segurança-da-informação">Uma nota sobre segurança da informação</h1> <p>Não existe segurança completa, existem graus de segurança. Alguém com motivação e recursos suficientes sempre vai conseguir obter as suas senhas. Por exemplo, a pessoa pode invadir sua casa e plantar uma câmera apontada para o seu teclado, e ver tudo que você digita, ou simplesmente te sequestrar e torturar até você revelar as suas senhas. É conhecimento geral que muitos governos do mundo inserem vulnerabilidades em chips utilizados nos celulares e computadores comerciais. Mas aí vem a seguinte consideração: se você está fugindo da ABIN, não sou eu que vou conseguir te ajudar. Boa sorte.</p> <p>Um gerenciador de senhas é a melhor solução que nós temos atualmente para controle de credenciais num cenário casual. Não é perfeito, mas funciona muito bem, e com certeza muito melhor do que manter as senhas na sua cabeça.</p>]]></content><author><name></name></author><category term="cybersecurity"/><summary type="html"><![CDATA[A casual introduction to password managers and Bitwarden]]></summary></entry><entry><title type="html">(PT-BR) Duplicate graph trick</title><link href="https://almeidaraul.github.io/blog/2023/graph/" rel="alternate" type="text/html" title="(PT-BR) Duplicate graph trick"/><published>2023-11-23T18:25:00+00:00</published><updated>2023-11-23T18:25:00+00:00</updated><id>https://almeidaraul.github.io/blog/2023/graph</id><content type="html" xml:base="https://almeidaraul.github.io/blog/2023/graph/"><![CDATA[<p>Estas são notas que acompanham a oficina que ministrei recentemente no Clube de Programação da UTFPR. Nela, eu apresentei o algoritmo de Dijkstra e um truque simples mas útil para resolver problemas no contexto de programação competitiva.</p> <p>Como o truque é simples, não faz mal adicionar a explicação do algoritmo de Dijkstra, mas você pode consultá-la em outros lugares como o CP-Algorithms. Os problemas apresentados serão três, sendo que os dois primeiros têm soluções mais simples (mas servem para motivos didáticos).</p> <h1 id="notação">Notação</h1> <p>Os termos distância, peso e custo são usados sem distinção. Neste texto não há nenhum rigor relacionado a notação.</p> <ul> <li>$n$: número de vértices</li> <li>$m$: número de arcos</li> <li>$E_{i,j}$: peso do arco $(i, j)$</li> </ul> <h1 id="os-problemas-enunciados-resumidos">Os problemas (enunciados resumidos)</h1> <ul> <li><a href="https://cses.fi/problemset/task/1195">Flight Discount (CSES)</a>: grafo direcionado, arcos com peso, $2 \leq n \leq 10^5$, $1 \leq m \leq 2\times10^5$. Encontre o menor caminho do vértice $1$ ao $n$ sendo que você pode escolher um arco $e$ qualquer e mudar seu peso $E_e$ para $\lfloor\frac{E_e}{2}\rfloor$ (só pode fazer isso uma vez)</li> <li><a href="https://atcoder.jp/contests/abc325/tasks/abc325_e">Our clients, please wait a moment (AtCoder)</a>: grafo direcionado, arcos com peso, $2 \leq n \leq 1000$, $m = \frac{n(n-1)}{2}$. Encontre o menor caminho do vértice $1$ ao $n$ sendo que, para o caminho escolhido, todos os pesos $E_{i,j}$ valerão $E_{i,j}A$ até um ponto arbitrário, e a partir daí valerão $E_{i,j}B + C$. $1 \leq A, B, C \leq 10^6$</li> <li><a href="https://codeforces.com/contest/1725/problem/M">Moving Both Hands (Codeforces)</a>: grafo direcionado, arcos com peso, $2 \leq n \leq 10^5$, $0 \leq m \leq 2\times10^5$. Para cada vértice $u &gt; 1$, encontre a menor distância para dois objetos se encontrarem seguindo os arcos, sendo que cada um se move de uma vez, um deles está no vértice $1$, e o outro está no vértice $u$.</li> </ul> <h1 id="dijkstra">Dijkstra</h1> <p>Nos três problemas nós usaremos o algoritmo de Dijkstra, então antes de irmos ao truque (e às soluções) vamos ver este algoritmo em detalhe.</p> <p>O algoritmo de Dijkstra resolve o problema de caminhos mínimos com origem única (Single-Source Shortest Paths, SSSP) para grafos com arcos de peso não-negativo. Neste problema, dado um vértice de origem, o objetivo é encontrar a menor distância para cada um dos outros vértices num caminho que começa na origem.</p> <p>Para as explicações a seguir, vamos fixar a origem no vértice $1$.</p> <h2 id="intuição">Intuição</h2> <p>A ideia intuitiva do algoritmo é: dado um vértice $u$ que com certeza tem caminho mínimo $w$, para cada arco $(u, v)$, é possível que o menor caminho de $v$ tenha custo $w+E_{u,v}$. Isso equivaleria a dizer que o caminho mínimo de $v$ passa pelo arco $(u, v)$. Posto de outra forma: para cada vértice com caminho mínimo definido, vamos tentar descobrir um novo menor caminho para seus vizinhos.</p> <h2 id="algoritmo">Algoritmo</h2> <p>Vamos guardar duas informações para cada vértice $v$: se ele já foi processado e qual a menor distância conhecida de $1$ até ele ($d_v$). Inicialmente, $d_1 = 0$ e $d_v = \infty \; \forall v \neq 1$.</p> <p>Para cada passo do algoritmo, vamos escolher o vértice $v$ com o menor $d_v$ entre aqueles que não foram processados ainda, e então processá-lo. Processar um vértice $v$ consiste em relaxar todos os arcos $(v, u)$ com a ideia apresentada na seção anterior: $d_u = \min(d_u, d_v+E_{v,u})$.</p> <p>É fácil ver que cada vértice só é processado uma vez, porque só processaremos um vértice que não foi processado. Mas por que é garantido que, ao processar um vértice, já temos o menor valor possível de $d_v$?</p> <h3 id="como-funciona">Como funciona</h3> <p>Digamos que seja possível que, após processar o vértice $v$, relaxemos algum arco que diminua o valor $d_v$.</p> <p>Se houvesse arcos negativos, poderia acontecer de inserirmos $v$ num ciclo com soma negativa, e aí seria possível tornar $d_v = -\infty$ (veja o grafo abaixo). No nosso problema, não há arcos negativos.</p> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1748037603477" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width: 309.140625px;" viewBox="0 0 309.140625 98"><style>#mermaid-1748037603477 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1748037603477 .node circle,#mermaid-1748037603477 .node ellipse,#mermaid-1748037603477 .node polygon,#mermaid-1748037603477 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1748037603477 .node.clickable{cursor:pointer}#mermaid-1748037603477 .arrowheadPath{fill:#333}#mermaid-1748037603477 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1748037603477 .edgeLabel{background-color:#e8e8e8}#mermaid-1748037603477 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1748037603477 .cluster text{fill:#333}#mermaid-1748037603477 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1748037603477 .actor{stroke:#ccf;fill:#ececff}#mermaid-1748037603477 text.actor{fill:#000;stroke:none}#mermaid-1748037603477 .actor-line{stroke:grey}#mermaid-1748037603477 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1748037603477 .messageLine0,#mermaid-1748037603477 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1748037603477 #arrowhead{fill:#333}#mermaid-1748037603477 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1748037603477 .messageText{fill:#333;stroke:none}#mermaid-1748037603477 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1748037603477 .labelText,#mermaid-1748037603477 .loopText{fill:#000;stroke:none}#mermaid-1748037603477 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1748037603477 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1748037603477 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1748037603477 .section{stroke:none;opacity:.2}#mermaid-1748037603477 .section0{fill:rgba(102,102,255,.49)}#mermaid-1748037603477 .section2{fill:#fff400}#mermaid-1748037603477 .section1,#mermaid-1748037603477 .section3{fill:#fff;opacity:.2}#mermaid-1748037603477 .sectionTitle0,#mermaid-1748037603477 .sectionTitle1,#mermaid-1748037603477 .sectionTitle2,#mermaid-1748037603477 .sectionTitle3{fill:#333}#mermaid-1748037603477 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1748037603477 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1748037603477 .grid path{stroke-width:0}#mermaid-1748037603477 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1748037603477 .task{stroke-width:2}#mermaid-1748037603477 .taskText{text-anchor:middle;font-size:11px}#mermaid-1748037603477 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1748037603477 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1748037603477 .taskText0,#mermaid-1748037603477 .taskText1,#mermaid-1748037603477 .taskText2,#mermaid-1748037603477 .taskText3{fill:#fff}#mermaid-1748037603477 .task0,#mermaid-1748037603477 .task1,#mermaid-1748037603477 .task2,#mermaid-1748037603477 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1748037603477 .taskTextOutside0,#mermaid-1748037603477 .taskTextOutside1,#mermaid-1748037603477 .taskTextOutside2,#mermaid-1748037603477 .taskTextOutside3{fill:#000}#mermaid-1748037603477 .active0,#mermaid-1748037603477 .active1,#mermaid-1748037603477 .active2,#mermaid-1748037603477 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1748037603477 .activeText0,#mermaid-1748037603477 .activeText1,#mermaid-1748037603477 .activeText2,#mermaid-1748037603477 .activeText3{fill:#000!important}#mermaid-1748037603477 .done0,#mermaid-1748037603477 .done1,#mermaid-1748037603477 .done2,#mermaid-1748037603477 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1748037603477 .doneText0,#mermaid-1748037603477 .doneText1,#mermaid-1748037603477 .doneText2,#mermaid-1748037603477 .doneText3{fill:#000!important}#mermaid-1748037603477 .crit0,#mermaid-1748037603477 .crit1,#mermaid-1748037603477 .crit2,#mermaid-1748037603477 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1748037603477 .activeCrit0,#mermaid-1748037603477 .activeCrit1,#mermaid-1748037603477 .activeCrit2,#mermaid-1748037603477 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1748037603477 .doneCrit0,#mermaid-1748037603477 .doneCrit1,#mermaid-1748037603477 .doneCrit2,#mermaid-1748037603477 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1748037603477 .activeCritText0,#mermaid-1748037603477 .activeCritText1,#mermaid-1748037603477 .activeCritText2,#mermaid-1748037603477 .activeCritText3,#mermaid-1748037603477 .doneCritText0,#mermaid-1748037603477 .doneCritText1,#mermaid-1748037603477 .doneCritText2,#mermaid-1748037603477 .doneCritText3{fill:#000!important}#mermaid-1748037603477 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1748037603477 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1748037603477 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1748037603477 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1748037603477 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1748037603477 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1748037603477 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1748037603477 #compositionEnd,#mermaid-1748037603477 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1748037603477 #aggregationEnd,#mermaid-1748037603477 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1748037603477 #dependencyEnd,#mermaid-1748037603477 #dependencyStart,#mermaid-1748037603477 #extensionEnd,#mermaid-1748037603477 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1748037603477 .branch-label,#mermaid-1748037603477 .commit-id,#mermaid-1748037603477 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1748037603477{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g transform="translate(-12, -12)"><g class="output"><g class="clusters"></g><g class="edgePaths"><g class="edgePath" style="opacity: 1;"><path class="path" d="M48.90625,57.019417475728154L77.90625,39L106.90625,39" marker-end="url(#arrowhead27)" style="fill:none"></path><defs><marker id="arrowhead27" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M135.8125,39L167.4765625,39L199.140625,39" marker-end="url(#arrowhead28)" style="fill:none"></path><defs><marker id="arrowhead28" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M227.140625,39L256.140625,39L285.140625,57.2093023255814" marker-end="url(#arrowhead29)" style="fill:none"></path><defs><marker id="arrowhead29" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M285.140625,74.79069767441861L256.140625,93L213.140625,93L167.4765625,93L121.359375,93L77.90625,93L48.90625,74.98058252427184" marker-end="url(#arrowhead30)" style="fill:none"></path><defs><marker id="arrowhead30" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity: 1;" transform="translate(77.90625,39)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">2</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(167.4765625,39)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">2</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(256.140625,39)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">1</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(167.4765625,93)"><g transform="translate(-6.6640625,-9)" class="label"><foreignObject width="13.328125" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">-5</span></div></foreignObject></g></g></g><g class="nodes"><g class="node" id="1" transform="translate(34.453125,66)" style="opacity: 1;"><rect rx="0" ry="0" x="-14.453125" y="-19" width="28.90625" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">1</div></foreignObject></g></g></g><g class="node" id="b" transform="translate(121.359375,39)" style="opacity: 1;"><rect rx="0" ry="0" x="-14.453125" y="-19" width="28.90625" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">b</div></foreignObject></g></g></g><g class="node" id="v" transform="translate(213.140625,39)" style="opacity: 1;"><rect rx="0" ry="0" x="-14" y="-19" width="28" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-4,-9)"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">v</div></foreignObject></g></g></g><g class="node" id="x" transform="translate(299.140625,66)" style="opacity: 1;"><rect rx="0" ry="0" x="-14" y="-19" width="28" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-4,-9)"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">x</div></foreignObject></g></g></g></g></g></g></svg> </div> <p>Como não há arcos negativos, o único jeito é se encontrarmos algum vértice $u$ com $d_u &lt; d_v$, onde há um caminho de $u$ até $v$ com peso $x$ tal que $d_u + x &lt; d_v$. No entanto, como processamos sempre o vértice com menor distância primeiro, e como $d_u &lt; d_v$, nós teríamos processado $u$ antes de $v$.</p> <p>Portanto, ao processar o vértice $v$, <strong>já conhecemos o menor valor possível para $d_v$.</strong></p> <h3 id="complexidade---observações">Complexidade - observações</h3> <p>Agora, qual será a complexidade desse algoritmo? Começaremos por algumas observações.</p> <h4 id="observação-1-cada-vértice-é-processado-uma-vez">Observação 1: cada vértice é processado uma vez</h4> <p>Cada vértice é processado apenas uma vez, porque não processamos vértices que já foram processados. Isso implica em um termo $\mathcal{O}(n)$ em algum lugar na complexidade final.</p> <h4 id="observação-2-cada-arco-é-relaxado-uma-vez">Observação 2: cada arco é relaxado uma vez</h4> <p>Nós relaxaremos um arco $(u, v)$ sempre que processarmos o vértice de origem $u$, ou seja, uma vez. Isso implica em um termo $+\mathcal{O}(m)$ em algum lugar na complexidade final (separado do termo anterior).</p> <p>Ignorando as complexidades de escolher o próximo vértice a processar e de relaxar um arco, temos uma complexidade de $\mathcal{O}(n+m)$.</p> <h3 id="complexidade-e-código-para-grafos-densos">Complexidade e código para grafos densos</h3> <p>Em grafos densos, o número de arcos é próximo do máximo ($\mathcal{O}(n^2)$). Se guardamos em um vetor booleano $m$ quais vértices já foram processados, podemos a cada iteração do algoritmo buscar o próximo vértice a ser processado em $\mathcal{O}(n)$, relaxando cada arco em $\mathcal{O}(1)$. Isso significa uma complexidade $\mathcal{O}(n^2 + m) = \mathcal{O}(n^2)$. Para grafos densos, essa complexidade é ótima. Abaixo deixo uma implementação do algoritmo nesse caso:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="n">ii</span> <span class="o">=</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">dijkstra</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">ii</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">g</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">const</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">g</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">d</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mh">0x3f3f3f3f</span><span class="p">),</span> <span class="n">m</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
	<span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// escolhe o próximo</span>
		<span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">m</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">||</span> <span class="n">d</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">d</span><span class="p">[</span><span class="n">j</span><span class="p">]))</span>
				<span class="n">v</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
		<span class="c1">// processa</span>
    <span class="n">m</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">u</span><span class="p">]</span><span class="o">:</span> <span class="n">g</span><span class="p">[</span><span class="n">v</span><span class="p">])</span>
			<span class="c1">// relaxa arco (v, u)</span>
			<span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">],</span> <span class="n">d</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">+</span><span class="n">x</span><span class="p">);</span>
	<span class="p">}</span>
  <span class="k">return</span> <span class="n">d</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="complexidade-e-código-para-grafos-esparsos">Complexidade e código para grafos esparsos</h3> <p>Quando o número de arcos é muito menor que o máximo possível, existe uma variação com desempenho melhor. O que vamos fazer é usar uma estrutura que permita inserção de valores e remoção de mínimo em tempo logarítmico, e guardar nela pares $(d_v, v)$.</p> <p>A melhoria dessa variação é que a seleção do próximo vértice a processar terá custo logarítmico, já que basta selecionar o menor par na estrutura.</p> <p>Ao mesmo tempo, relaxar um arco deixará de ser constante, porque ao encontrar um peso menor para o vértice $u$ nós teremos de adicioná-lo à estrutura em tempo logarítmico.</p> <p>Com essa alteração, a complexidade do algoritmo passa a ser $\mathcal{O}(n\log n + m\log n)$, que é muito melhor que a anterior no caso de grafos esparsos.</p> <p>A implementação abaixo usa uma fila de prioridade, mas outras estruturas apresentam a mesma complexidade. Com uma <em>fibonacci heap</em> é possível atingir tempo constante na inserção e logarítmico na remoção, mas como ela é muito mais difícil de implementar, não é tão adequada para programação competitiva.</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="n">ii</span> <span class="o">=</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">dijkstra</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">ii</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">g</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">const</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">g</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">d</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mh">0x3f3f3f3f</span><span class="p">);</span>
	<span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">ii</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">ii</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">greater</span><span class="o">&lt;</span><span class="n">ii</span><span class="o">&gt;&gt;</span> <span class="n">pq</span><span class="p">;</span>
	<span class="n">pq</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
	<span class="k">while</span> <span class="p">(</span><span class="n">pq</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
		<span class="c1">// escolhe o próximo</span>
		<span class="k">auto</span> <span class="p">[</span><span class="n">w</span><span class="p">,</span> <span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">();</span> <span class="n">pq</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">w</span> <span class="o">!=</span> <span class="n">d</span><span class="p">[</span><span class="n">v</span><span class="p">])</span> <span class="c1">// descarta pares desatualizados</span>
			<span class="k">continue</span><span class="p">;</span>
		<span class="c1">// processa</span>
		<span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">u</span><span class="p">]</span><span class="o">:</span> <span class="n">g</span><span class="p">[</span><span class="n">v</span><span class="p">])</span>
			<span class="c1">// relaxa arco (v, u)</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">w</span><span class="o">+</span><span class="n">x</span><span class="p">)</span>
				<span class="n">pq</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">w</span><span class="o">+</span><span class="n">x</span><span class="p">),</span> <span class="n">u</span><span class="p">);</span>
	<span class="p">}</span>
  <span class="k">return</span> <span class="n">d</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h1 id="truque-do-grafo-duplicado">Truque do grafo duplicado</h1> <p>Agora vamos ao truque que é o ponto central disso tudo. É uma técnica de modelagem bem simples, que só merece um nome porque essa página precisava de um título.</p> <p>A técnica consiste em duplicar o grafo, fazendo com que cada vértice e arco tenha uma versão “original” e uma “modificada”. A modificação depende do problema.</p> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1748037603822" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width: 145.421875px;" viewBox="0 0 145.421875 325.921875"><style>#mermaid-1748037603822 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1748037603822 .node circle,#mermaid-1748037603822 .node ellipse,#mermaid-1748037603822 .node polygon,#mermaid-1748037603822 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1748037603822 .node.clickable{cursor:pointer}#mermaid-1748037603822 .arrowheadPath{fill:#333}#mermaid-1748037603822 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1748037603822 .edgeLabel{background-color:#e8e8e8}#mermaid-1748037603822 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1748037603822 .cluster text{fill:#333}#mermaid-1748037603822 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1748037603822 .actor{stroke:#ccf;fill:#ececff}#mermaid-1748037603822 text.actor{fill:#000;stroke:none}#mermaid-1748037603822 .actor-line{stroke:grey}#mermaid-1748037603822 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1748037603822 .messageLine0,#mermaid-1748037603822 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1748037603822 #arrowhead{fill:#333}#mermaid-1748037603822 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1748037603822 .messageText{fill:#333;stroke:none}#mermaid-1748037603822 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1748037603822 .labelText,#mermaid-1748037603822 .loopText{fill:#000;stroke:none}#mermaid-1748037603822 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1748037603822 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1748037603822 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1748037603822 .section{stroke:none;opacity:.2}#mermaid-1748037603822 .section0{fill:rgba(102,102,255,.49)}#mermaid-1748037603822 .section2{fill:#fff400}#mermaid-1748037603822 .section1,#mermaid-1748037603822 .section3{fill:#fff;opacity:.2}#mermaid-1748037603822 .sectionTitle0,#mermaid-1748037603822 .sectionTitle1,#mermaid-1748037603822 .sectionTitle2,#mermaid-1748037603822 .sectionTitle3{fill:#333}#mermaid-1748037603822 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1748037603822 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1748037603822 .grid path{stroke-width:0}#mermaid-1748037603822 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1748037603822 .task{stroke-width:2}#mermaid-1748037603822 .taskText{text-anchor:middle;font-size:11px}#mermaid-1748037603822 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1748037603822 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1748037603822 .taskText0,#mermaid-1748037603822 .taskText1,#mermaid-1748037603822 .taskText2,#mermaid-1748037603822 .taskText3{fill:#fff}#mermaid-1748037603822 .task0,#mermaid-1748037603822 .task1,#mermaid-1748037603822 .task2,#mermaid-1748037603822 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1748037603822 .taskTextOutside0,#mermaid-1748037603822 .taskTextOutside1,#mermaid-1748037603822 .taskTextOutside2,#mermaid-1748037603822 .taskTextOutside3{fill:#000}#mermaid-1748037603822 .active0,#mermaid-1748037603822 .active1,#mermaid-1748037603822 .active2,#mermaid-1748037603822 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1748037603822 .activeText0,#mermaid-1748037603822 .activeText1,#mermaid-1748037603822 .activeText2,#mermaid-1748037603822 .activeText3{fill:#000!important}#mermaid-1748037603822 .done0,#mermaid-1748037603822 .done1,#mermaid-1748037603822 .done2,#mermaid-1748037603822 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1748037603822 .doneText0,#mermaid-1748037603822 .doneText1,#mermaid-1748037603822 .doneText2,#mermaid-1748037603822 .doneText3{fill:#000!important}#mermaid-1748037603822 .crit0,#mermaid-1748037603822 .crit1,#mermaid-1748037603822 .crit2,#mermaid-1748037603822 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1748037603822 .activeCrit0,#mermaid-1748037603822 .activeCrit1,#mermaid-1748037603822 .activeCrit2,#mermaid-1748037603822 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1748037603822 .doneCrit0,#mermaid-1748037603822 .doneCrit1,#mermaid-1748037603822 .doneCrit2,#mermaid-1748037603822 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1748037603822 .activeCritText0,#mermaid-1748037603822 .activeCritText1,#mermaid-1748037603822 .activeCritText2,#mermaid-1748037603822 .activeCritText3,#mermaid-1748037603822 .doneCritText0,#mermaid-1748037603822 .doneCritText1,#mermaid-1748037603822 .doneCritText2,#mermaid-1748037603822 .doneCritText3{fill:#000!important}#mermaid-1748037603822 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1748037603822 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1748037603822 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1748037603822 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1748037603822 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1748037603822 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1748037603822 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1748037603822 #compositionEnd,#mermaid-1748037603822 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1748037603822 #aggregationEnd,#mermaid-1748037603822 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1748037603822 #dependencyEnd,#mermaid-1748037603822 #dependencyStart,#mermaid-1748037603822 #extensionEnd,#mermaid-1748037603822 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1748037603822 .branch-label,#mermaid-1748037603822 .commit-id,#mermaid-1748037603822 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1748037603822{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g transform="translate(-12, -12)"><g class="output"><g class="clusters"></g><g class="edgePaths"><g class="edgePath" style="opacity: 1;"><path class="path" d="M84.7109375,132.5L84.7109375,166.5L84.7109375,200.5" marker-end="url(#arrowhead8)" style="fill:none"></path><defs><marker id="arrowhead8" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity: 1;" transform="translate(84.7109375,166.5)"><g transform="translate(-28.875,-9)" class="label"><foreignObject width="57.75" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">transição</span></div></foreignObject></g></g></g><g class="nodes"><g class="node" id="id1" transform="translate(84.7109375,76.25)" style="opacity: 1;"><circle x="-56.25" y="-19" r="56.25"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-46.25,-9)"><foreignObject width="92.5" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">grafo original</div></foreignObject></g></g></g><g class="node" id="id2" transform="translate(84.7109375,265.2109375)" style="opacity: 1;"><circle x="-64.7109375" y="-19" r="64.7109375"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-54.7109375,-9)"><foreignObject width="109.421875" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">grafo duplicado</div></foreignObject></g></g></g></g></g></g></svg> </div> <p>Além dos vértices e arcos duplicados, existirão arcos de transição entre o “grafo original” e o “grafo duplicado”. Isso vai fazer mais sentido quando olharmos para os problemas, mas essencialmente esses arcos de transição representam decisões irreversíveis sobre a maneira como se caminha no grafo: a versão duplicada do grafo é onde você caminha depois de tomar essas decisões.</p> <h2 id="soluções-com-o-truque">Soluções com o truque</h2> <h3 id="flight-discount">Flight Discount</h3> <p>Esse é o problema mais simples, com uma solução muito mais simples que essa, mas é bem fácil de pensar com esse truque. Aqui, a versão duplicada do grafo vai ser igual ao grafo original, e os arcos de transição serão os arcos com o desconto aplicado. Dessa maneira, o desconto só poderá ser aplicado uma vez em um caminho pelo grafo, porque não existem arcos de retorno para a parte original.</p> <p>Considere este grafo de exemplo:</p> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1748037604148" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width: 246px;" viewBox="0 0 246 54"><style>#mermaid-1748037604148 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1748037604148 .node circle,#mermaid-1748037604148 .node ellipse,#mermaid-1748037604148 .node polygon,#mermaid-1748037604148 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1748037604148 .node.clickable{cursor:pointer}#mermaid-1748037604148 .arrowheadPath{fill:#333}#mermaid-1748037604148 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1748037604148 .edgeLabel{background-color:#e8e8e8}#mermaid-1748037604148 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1748037604148 .cluster text{fill:#333}#mermaid-1748037604148 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1748037604148 .actor{stroke:#ccf;fill:#ececff}#mermaid-1748037604148 text.actor{fill:#000;stroke:none}#mermaid-1748037604148 .actor-line{stroke:grey}#mermaid-1748037604148 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1748037604148 .messageLine0,#mermaid-1748037604148 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1748037604148 #arrowhead{fill:#333}#mermaid-1748037604148 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1748037604148 .messageText{fill:#333;stroke:none}#mermaid-1748037604148 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1748037604148 .labelText,#mermaid-1748037604148 .loopText{fill:#000;stroke:none}#mermaid-1748037604148 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1748037604148 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1748037604148 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1748037604148 .section{stroke:none;opacity:.2}#mermaid-1748037604148 .section0{fill:rgba(102,102,255,.49)}#mermaid-1748037604148 .section2{fill:#fff400}#mermaid-1748037604148 .section1,#mermaid-1748037604148 .section3{fill:#fff;opacity:.2}#mermaid-1748037604148 .sectionTitle0,#mermaid-1748037604148 .sectionTitle1,#mermaid-1748037604148 .sectionTitle2,#mermaid-1748037604148 .sectionTitle3{fill:#333}#mermaid-1748037604148 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1748037604148 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1748037604148 .grid path{stroke-width:0}#mermaid-1748037604148 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1748037604148 .task{stroke-width:2}#mermaid-1748037604148 .taskText{text-anchor:middle;font-size:11px}#mermaid-1748037604148 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1748037604148 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1748037604148 .taskText0,#mermaid-1748037604148 .taskText1,#mermaid-1748037604148 .taskText2,#mermaid-1748037604148 .taskText3{fill:#fff}#mermaid-1748037604148 .task0,#mermaid-1748037604148 .task1,#mermaid-1748037604148 .task2,#mermaid-1748037604148 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1748037604148 .taskTextOutside0,#mermaid-1748037604148 .taskTextOutside1,#mermaid-1748037604148 .taskTextOutside2,#mermaid-1748037604148 .taskTextOutside3{fill:#000}#mermaid-1748037604148 .active0,#mermaid-1748037604148 .active1,#mermaid-1748037604148 .active2,#mermaid-1748037604148 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1748037604148 .activeText0,#mermaid-1748037604148 .activeText1,#mermaid-1748037604148 .activeText2,#mermaid-1748037604148 .activeText3{fill:#000!important}#mermaid-1748037604148 .done0,#mermaid-1748037604148 .done1,#mermaid-1748037604148 .done2,#mermaid-1748037604148 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1748037604148 .doneText0,#mermaid-1748037604148 .doneText1,#mermaid-1748037604148 .doneText2,#mermaid-1748037604148 .doneText3{fill:#000!important}#mermaid-1748037604148 .crit0,#mermaid-1748037604148 .crit1,#mermaid-1748037604148 .crit2,#mermaid-1748037604148 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1748037604148 .activeCrit0,#mermaid-1748037604148 .activeCrit1,#mermaid-1748037604148 .activeCrit2,#mermaid-1748037604148 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1748037604148 .doneCrit0,#mermaid-1748037604148 .doneCrit1,#mermaid-1748037604148 .doneCrit2,#mermaid-1748037604148 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1748037604148 .activeCritText0,#mermaid-1748037604148 .activeCritText1,#mermaid-1748037604148 .activeCritText2,#mermaid-1748037604148 .activeCritText3,#mermaid-1748037604148 .doneCritText0,#mermaid-1748037604148 .doneCritText1,#mermaid-1748037604148 .doneCritText2,#mermaid-1748037604148 .doneCritText3{fill:#000!important}#mermaid-1748037604148 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1748037604148 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1748037604148 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1748037604148 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1748037604148 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1748037604148 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1748037604148 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1748037604148 #compositionEnd,#mermaid-1748037604148 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1748037604148 #aggregationEnd,#mermaid-1748037604148 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1748037604148 #dependencyEnd,#mermaid-1748037604148 #dependencyStart,#mermaid-1748037604148 #extensionEnd,#mermaid-1748037604148 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1748037604148 .branch-label,#mermaid-1748037604148 .commit-id,#mermaid-1748037604148 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1748037604148{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g transform="translate(-12, -12)"><g class="output"><g class="clusters"></g><g class="edgePaths"><g class="edgePath" style="opacity: 1;"><path class="path" d="M58,39L87,39L116,39" marker-end="url(#arrowhead14)" style="fill:none"></path><defs><marker id="arrowhead14" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M154,39L183,39L212,39" marker-end="url(#arrowhead15)" style="fill:none"></path><defs><marker id="arrowhead15" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity: 1;" transform="translate(87,39)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">7</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(183,39)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">4</span></div></foreignObject></g></g></g><g class="nodes"><g class="node" id="id1" transform="translate(39,39)" style="opacity: 1;"><circle x="-14.453125" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">1</div></foreignObject></g></g></g><g class="node" id="id2" transform="translate(135,39)" style="opacity: 1;"><circle x="-14.453125" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">2</div></foreignObject></g></g></g><g class="node" id="id3" transform="translate(231,39)" style="opacity: 1;"><circle x="-14.453125" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">3</div></foreignObject></g></g></g></g></g></g></svg> </div> <p>Com o truque aplicado, teríamos o grafo abaixo. A parte de cima é idêntica ao grafo original, bem como a parte de baixo. Os arcos que levam de cima para baixo correspondem ao desconto aplicado. Note que não há arcos de baixo para cima.</p> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1748037604481" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width: 246px;" viewBox="0 0 246 218"><style>#mermaid-1748037604481 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1748037604481 .node circle,#mermaid-1748037604481 .node ellipse,#mermaid-1748037604481 .node polygon,#mermaid-1748037604481 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1748037604481 .node.clickable{cursor:pointer}#mermaid-1748037604481 .arrowheadPath{fill:#333}#mermaid-1748037604481 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1748037604481 .edgeLabel{background-color:#e8e8e8}#mermaid-1748037604481 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1748037604481 .cluster text{fill:#333}#mermaid-1748037604481 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1748037604481 .actor{stroke:#ccf;fill:#ececff}#mermaid-1748037604481 text.actor{fill:#000;stroke:none}#mermaid-1748037604481 .actor-line{stroke:grey}#mermaid-1748037604481 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1748037604481 .messageLine0,#mermaid-1748037604481 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1748037604481 #arrowhead{fill:#333}#mermaid-1748037604481 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1748037604481 .messageText{fill:#333;stroke:none}#mermaid-1748037604481 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1748037604481 .labelText,#mermaid-1748037604481 .loopText{fill:#000;stroke:none}#mermaid-1748037604481 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1748037604481 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1748037604481 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1748037604481 .section{stroke:none;opacity:.2}#mermaid-1748037604481 .section0{fill:rgba(102,102,255,.49)}#mermaid-1748037604481 .section2{fill:#fff400}#mermaid-1748037604481 .section1,#mermaid-1748037604481 .section3{fill:#fff;opacity:.2}#mermaid-1748037604481 .sectionTitle0,#mermaid-1748037604481 .sectionTitle1,#mermaid-1748037604481 .sectionTitle2,#mermaid-1748037604481 .sectionTitle3{fill:#333}#mermaid-1748037604481 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1748037604481 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1748037604481 .grid path{stroke-width:0}#mermaid-1748037604481 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1748037604481 .task{stroke-width:2}#mermaid-1748037604481 .taskText{text-anchor:middle;font-size:11px}#mermaid-1748037604481 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1748037604481 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1748037604481 .taskText0,#mermaid-1748037604481 .taskText1,#mermaid-1748037604481 .taskText2,#mermaid-1748037604481 .taskText3{fill:#fff}#mermaid-1748037604481 .task0,#mermaid-1748037604481 .task1,#mermaid-1748037604481 .task2,#mermaid-1748037604481 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1748037604481 .taskTextOutside0,#mermaid-1748037604481 .taskTextOutside1,#mermaid-1748037604481 .taskTextOutside2,#mermaid-1748037604481 .taskTextOutside3{fill:#000}#mermaid-1748037604481 .active0,#mermaid-1748037604481 .active1,#mermaid-1748037604481 .active2,#mermaid-1748037604481 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1748037604481 .activeText0,#mermaid-1748037604481 .activeText1,#mermaid-1748037604481 .activeText2,#mermaid-1748037604481 .activeText3{fill:#000!important}#mermaid-1748037604481 .done0,#mermaid-1748037604481 .done1,#mermaid-1748037604481 .done2,#mermaid-1748037604481 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1748037604481 .doneText0,#mermaid-1748037604481 .doneText1,#mermaid-1748037604481 .doneText2,#mermaid-1748037604481 .doneText3{fill:#000!important}#mermaid-1748037604481 .crit0,#mermaid-1748037604481 .crit1,#mermaid-1748037604481 .crit2,#mermaid-1748037604481 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1748037604481 .activeCrit0,#mermaid-1748037604481 .activeCrit1,#mermaid-1748037604481 .activeCrit2,#mermaid-1748037604481 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1748037604481 .doneCrit0,#mermaid-1748037604481 .doneCrit1,#mermaid-1748037604481 .doneCrit2,#mermaid-1748037604481 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1748037604481 .activeCritText0,#mermaid-1748037604481 .activeCritText1,#mermaid-1748037604481 .activeCritText2,#mermaid-1748037604481 .activeCritText3,#mermaid-1748037604481 .doneCritText0,#mermaid-1748037604481 .doneCritText1,#mermaid-1748037604481 .doneCritText2,#mermaid-1748037604481 .doneCritText3{fill:#000!important}#mermaid-1748037604481 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1748037604481 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1748037604481 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1748037604481 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1748037604481 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1748037604481 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1748037604481 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1748037604481 #compositionEnd,#mermaid-1748037604481 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1748037604481 #aggregationEnd,#mermaid-1748037604481 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1748037604481 #dependencyEnd,#mermaid-1748037604481 #dependencyStart,#mermaid-1748037604481 #extensionEnd,#mermaid-1748037604481 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1748037604481 .branch-label,#mermaid-1748037604481 .commit-id,#mermaid-1748037604481 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1748037604481{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g transform="translate(-12, -12)"><g class="output"><g class="clusters"></g><g class="edgePaths"><g class="edgePath" style="opacity: 1;"><path class="path" d="M56.66632564835416,70.00707943085982L87,58L116,58" marker-end="url(#arrowhead22)" style="fill:none"></path><defs><marker id="arrowhead22" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M152.66632564835416,51.00707943085981L183,39L212,39" marker-end="url(#arrowhead23)" style="fill:none"></path><defs><marker id="arrowhead23" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M58,203L87,203L117.33367435164584,190.99292056914018" marker-end="url(#arrowhead24)" style="fill:none"></path><defs><marker id="arrowhead24" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M154,184L183,184L213.33367435164584,171.99292056914018" marker-end="url(#arrowhead25)" style="fill:none"></path><defs><marker id="arrowhead25" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M50.514821089994264,92.11320268061748L87,140L120.99407133618591,171.1612320581704" marker-end="url(#arrowhead26)" style="fill:none"></path><defs><marker id="arrowhead26" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M149.00592866381407,70.83876794182959L183,102L219.48517891000574,149.88679731938254" marker-end="url(#arrowhead27)" style="fill:none"></path><defs><marker id="arrowhead27" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity: 1;" transform="translate(87,58)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">7</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(183,39)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">4</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(87,203)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">7</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(183,184)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">4</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(87,140)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">3</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(183,102)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">2</span></div></foreignObject></g></g></g><g class="nodes"><g class="node" id="id1" transform="translate(39,77)" style="opacity: 1;"><circle x="-14.453125" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">1</div></foreignObject></g></g></g><g class="node" id="id2" transform="translate(135,58)" style="opacity: 1;"><circle x="-14.453125" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">2</div></foreignObject></g></g></g><g class="node" id="id3" transform="translate(231,39)" style="opacity: 1;"><circle x="-14.453125" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">3</div></foreignObject></g></g></g><g class="node" id="id11" transform="translate(39,203)" style="opacity: 1;"><circle x="-15.9765625" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-5.9765625,-9)"><foreignObject width="11.953125" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">1'</div></foreignObject></g></g></g><g class="node" id="id21" transform="translate(135,184)" style="opacity: 1;"><circle x="-15.9765625" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-5.9765625,-9)"><foreignObject width="11.953125" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">2'</div></foreignObject></g></g></g><g class="node" id="id31" transform="translate(231,165)" style="opacity: 1;"><circle x="-15.9765625" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-5.9765625,-9)"><foreignObject width="11.953125" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">3'</div></foreignObject></g></g></g></g></g></g></svg> </div> <p>A implementação dessa solução é muito simples. O código do Dijkstra é o mesmo, e a construção do grafo é levemente diferente:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
  <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span> <span class="o">&gt;&gt;</span> <span class="n">c</span><span class="p">;</span>
  <span class="n">g</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>  <span class="c1">// arco conforme na entrada</span>
  <span class="n">g</span><span class="p">[</span><span class="n">a</span><span class="o">+</span><span class="n">n</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">b</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>  <span class="c1">// arco duplicado (parte de "baixo" do grafo)</span>
  <span class="n">g</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">c</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">b</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>  <span class="c1">// arco de transição (desconto)</span>
<span class="p">}</span>
</code></pre></div></div> <p>Neste código, nós reservamos os vértices $1 \leq v \leq n$ para o grafo “original”, e os vértices $n+1 \leq v^{\prime} \leq 2n$ para o grafo duplicado.</p> <h3 id="our-clients-please-wait-a-moment">Our clients, please wait a moment</h3> <p>A ideia aqui é muito parecida com a do problema anterior. Dessa vez os arcos de transição terão custo $0$, mas os pesos dos arcos serão diferentes dependendo de em qual parte do grafo você está. O grafo original corresponde ao prefixo do caminho, que é de carro, e o grafo duplicado corresponde ao sufixo, que é de trem.</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">d</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">d</span><span class="p">;</span>
    <span class="n">g</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">d</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>  <span class="c1">// custo de carro: A*D(i,j)</span>
    <span class="n">g</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>  <span class="c1">// transição: custo 0</span>
    <span class="n">g</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">n</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">d</span><span class="o">*</span><span class="n">b</span><span class="o">+</span><span class="n">c</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>  <span class="c1">// custo de trem: B*D(i,j) + C</span>
  <span class="p">}</span>
</code></pre></div></div> <h3 id="moving-both-hands">Moving Both Hands</h3> <p>Neste problema vamos usar uma ideia mais complicada, mas ainda baseada no truque do grafo duplicado. A primeira coisa que queremos ignorar na nossa modelagem é que tem dois objetos distintos se movendo.</p> <p>Observe que, em termos de custo, a mão esquerda e a mão direita se encontrarem num ponto X é a mesma coisa que a mão esquerda fazer o mesmo caminho até o ponto X, depois fazer o caminho contrário da mão direita até o ponto de origem desta.</p> <p>Isto é, no caminho ótimo para as duas mãos se encontrarem (nesta visualização na qual a mão direita não se move), a mão esquerda vai caminhar pelo grafo normalmente até um ponto arbitrário do caminho, e então passará a caminhar pelo grafo com arcos invertidos pelo resto do caminho.</p> <p>Agora a modelagem com o truque fica praticamente pronta: o grafo duplicado será o grafo transposto, e os arcos de transição levarão cada vértice $v$ ao vértice $v^{\prime}$ com custo $0$.</p> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1748037604827" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width: 342px;" viewBox="0 0 342 180"><style>#mermaid-1748037604827 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1748037604827 .node circle,#mermaid-1748037604827 .node ellipse,#mermaid-1748037604827 .node polygon,#mermaid-1748037604827 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1748037604827 .node.clickable{cursor:pointer}#mermaid-1748037604827 .arrowheadPath{fill:#333}#mermaid-1748037604827 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1748037604827 .edgeLabel{background-color:#e8e8e8}#mermaid-1748037604827 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1748037604827 .cluster text{fill:#333}#mermaid-1748037604827 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1748037604827 .actor{stroke:#ccf;fill:#ececff}#mermaid-1748037604827 text.actor{fill:#000;stroke:none}#mermaid-1748037604827 .actor-line{stroke:grey}#mermaid-1748037604827 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1748037604827 .messageLine0,#mermaid-1748037604827 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1748037604827 #arrowhead{fill:#333}#mermaid-1748037604827 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1748037604827 .messageText{fill:#333;stroke:none}#mermaid-1748037604827 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1748037604827 .labelText,#mermaid-1748037604827 .loopText{fill:#000;stroke:none}#mermaid-1748037604827 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1748037604827 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1748037604827 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1748037604827 .section{stroke:none;opacity:.2}#mermaid-1748037604827 .section0{fill:rgba(102,102,255,.49)}#mermaid-1748037604827 .section2{fill:#fff400}#mermaid-1748037604827 .section1,#mermaid-1748037604827 .section3{fill:#fff;opacity:.2}#mermaid-1748037604827 .sectionTitle0,#mermaid-1748037604827 .sectionTitle1,#mermaid-1748037604827 .sectionTitle2,#mermaid-1748037604827 .sectionTitle3{fill:#333}#mermaid-1748037604827 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1748037604827 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1748037604827 .grid path{stroke-width:0}#mermaid-1748037604827 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1748037604827 .task{stroke-width:2}#mermaid-1748037604827 .taskText{text-anchor:middle;font-size:11px}#mermaid-1748037604827 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1748037604827 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1748037604827 .taskText0,#mermaid-1748037604827 .taskText1,#mermaid-1748037604827 .taskText2,#mermaid-1748037604827 .taskText3{fill:#fff}#mermaid-1748037604827 .task0,#mermaid-1748037604827 .task1,#mermaid-1748037604827 .task2,#mermaid-1748037604827 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1748037604827 .taskTextOutside0,#mermaid-1748037604827 .taskTextOutside1,#mermaid-1748037604827 .taskTextOutside2,#mermaid-1748037604827 .taskTextOutside3{fill:#000}#mermaid-1748037604827 .active0,#mermaid-1748037604827 .active1,#mermaid-1748037604827 .active2,#mermaid-1748037604827 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1748037604827 .activeText0,#mermaid-1748037604827 .activeText1,#mermaid-1748037604827 .activeText2,#mermaid-1748037604827 .activeText3{fill:#000!important}#mermaid-1748037604827 .done0,#mermaid-1748037604827 .done1,#mermaid-1748037604827 .done2,#mermaid-1748037604827 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1748037604827 .doneText0,#mermaid-1748037604827 .doneText1,#mermaid-1748037604827 .doneText2,#mermaid-1748037604827 .doneText3{fill:#000!important}#mermaid-1748037604827 .crit0,#mermaid-1748037604827 .crit1,#mermaid-1748037604827 .crit2,#mermaid-1748037604827 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1748037604827 .activeCrit0,#mermaid-1748037604827 .activeCrit1,#mermaid-1748037604827 .activeCrit2,#mermaid-1748037604827 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1748037604827 .doneCrit0,#mermaid-1748037604827 .doneCrit1,#mermaid-1748037604827 .doneCrit2,#mermaid-1748037604827 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1748037604827 .activeCritText0,#mermaid-1748037604827 .activeCritText1,#mermaid-1748037604827 .activeCritText2,#mermaid-1748037604827 .activeCritText3,#mermaid-1748037604827 .doneCritText0,#mermaid-1748037604827 .doneCritText1,#mermaid-1748037604827 .doneCritText2,#mermaid-1748037604827 .doneCritText3{fill:#000!important}#mermaid-1748037604827 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1748037604827 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1748037604827 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1748037604827 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1748037604827 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1748037604827 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1748037604827 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1748037604827 #compositionEnd,#mermaid-1748037604827 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1748037604827 #aggregationEnd,#mermaid-1748037604827 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1748037604827 #dependencyEnd,#mermaid-1748037604827 #dependencyStart,#mermaid-1748037604827 #extensionEnd,#mermaid-1748037604827 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1748037604827 .branch-label,#mermaid-1748037604827 .commit-id,#mermaid-1748037604827 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1748037604827{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g transform="translate(-12, -12)"><g class="output"><g class="clusters"></g><g class="edgePaths"><g class="edgePath" style="opacity: 1;"><path class="path" d="M53.00592866381409,114.83876794182959L87,146L116,146" marker-end="url(#arrowhead28)" style="fill:none"></path><defs><marker id="arrowhead28" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M152.66632564835416,152.99292056914018L183,165L212,165" marker-end="url(#arrowhead29)" style="fill:none"></path><defs><marker id="arrowhead29" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M154,39L183,39L213.33367435164584,51.00707943085981" marker-end="url(#arrowhead30)" style="fill:none"></path><defs><marker id="arrowhead30" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M250,58L279,58L312.9940713361859,89.16123205817041" marker-end="url(#arrowhead31)" style="fill:none"></path><defs><marker id="arrowhead31" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M50.514821089994264,86.88679731938252L87,39L116,39" marker-end="url(#arrowhead32)" style="fill:none"></path><defs><marker id="arrowhead32" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M149.00592866381407,133.1612320581704L183,102L216.99407133618593,70.83876794182959" marker-end="url(#arrowhead33)" style="fill:none"></path><defs><marker id="arrowhead33" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M250,165L279,165L315.48517891000574,117.11320268061748" marker-end="url(#arrowhead34)" style="fill:none"></path><defs><marker id="arrowhead34" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity: 1;" transform="translate(87,146)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">7</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(183,165)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">4</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(183,39)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">7</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(279,58)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">4</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(87,39)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">0</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(183,102)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">0</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(279,165)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">0</span></div></foreignObject></g></g></g><g class="nodes"><g class="node" id="id1" transform="translate(39,102)" style="opacity: 1;"><circle x="-14.453125" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">1</div></foreignObject></g></g></g><g class="node" id="id2" transform="translate(135,146)" style="opacity: 1;"><circle x="-14.453125" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">2</div></foreignObject></g></g></g><g class="node" id="id3" transform="translate(231,165)" style="opacity: 1;"><circle x="-14.453125" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">3</div></foreignObject></g></g></g><g class="node" id="id11" transform="translate(135,39)" style="opacity: 1;"><circle x="-15.9765625" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-5.9765625,-9)"><foreignObject width="11.953125" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">1'</div></foreignObject></g></g></g><g class="node" id="id21" transform="translate(231,58)" style="opacity: 1;"><circle x="-15.9765625" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-5.9765625,-9)"><foreignObject width="11.953125" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">2'</div></foreignObject></g></g></g><g class="node" id="id31" transform="translate(327,102)" style="opacity: 1;"><circle x="-15.9765625" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-5.9765625,-9)"><foreignObject width="11.953125" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">3'</div></foreignObject></g></g></g></g></g></g></svg> </div> <p>Construção do grafo:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
  <span class="n">g</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
<span class="k">while</span> <span class="p">(</span><span class="n">m</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">;</span>
  <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">u</span> <span class="o">&gt;&gt;</span> <span class="n">v</span> <span class="o">&gt;&gt;</span> <span class="n">w</span><span class="p">;</span>
  <span class="n">u</span><span class="o">--</span><span class="p">,</span> <span class="n">v</span><span class="o">--</span><span class="p">;</span>
  <span class="n">g</span><span class="p">[</span><span class="n">u</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
  <span class="n">g</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="observação-obtendo-a-resposta">Observação: obtendo a resposta</h3> <p>Note que para encontrar a menor distância até um vértice $v$, em qualquer um dos problemas mencionados, você deverá selecionar a distância mínima entre $d_v$ e $d_{v^{\prime}}$.</p> <h1 id="conclusão">Conclusão</h1> <p>É isso! Esse foi o truque. Apesar de ser bem simples eu achei que seria algo acessível para as pessoas mais novas em programação competitiva, então escolhi esse tema para a oficina.</p> <p>Se houver qualquer dúvida não hesite em entrar em contato comigo.</p>]]></content><author><name>Raul Almeida</name></author><category term="competitive_programming"/><summary type="html"><![CDATA[A simple graph trick to solve some SSSP problems]]></summary></entry><entry><title type="html">Glikoz update</title><link href="https://almeidaraul.github.io/blog/2023/glikoz/" rel="alternate" type="text/html" title="Glikoz update"/><published>2023-11-22T18:30:00+00:00</published><updated>2023-11-22T18:30:00+00:00</updated><id>https://almeidaraul.github.io/blog/2023/glikoz</id><content type="html" xml:base="https://almeidaraul.github.io/blog/2023/glikoz/"><![CDATA[<blockquote> <p>Check out <a href="https://github.com/almeidaraul/glikoz">Glikoz @ GitHub</a></p> </blockquote> <p>I have just finished pushing some small changes to the main glikoz branch, and finally I can call it something I’d be okay with using for the rest of my life. This opens up space to doing cool things and making things look better, but first I’ll get into some detail about what are the most important features in glikoz, at least for me.</p> <h1 id="what-we-have">What we have</h1> <p>First of all, glikoz works with exports from a very well-established OSS app for recording blood sugar and other relevant information, namely Diaguard. This was very important for me from the beginning, coming from proprietary software that was very restrictive in letting users access their own data in a raw format.</p> <p>With that data, we have all the basic analyses. It is always important for a doctor and their diabetic patients to keep track of how their Time in Range and HbA1c are going. Glikoz reports both the time in range and the estimated HbA1c (you can find references on how the HbA1c is estimated in the GitHub repository). Besides that, the usage of test strips, lancets and fast-acting insulin is reported to help with managing the use of these very expensive resources.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/glikoz1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/glikoz1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/glikoz1-1400.webp"/> <img src="/assets/img/glikoz1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/glikoz2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/glikoz2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/glikoz2-1400.webp"/> <img src="/assets/img/glikoz2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 24-hour graphs for mean glucose and time-specific time in range. </div> <p>There is also a 24 hour graph with the mean glucose by hour and the reported minimum/maximum as well, and another that presents the Time in Range for each hour instead of all the entries. These are both very important for a less-biased, in-depth review of blood sugar behaviour.</p> <p>For the PDF reports to be useful in actual day-to-day patient data analysis, glikoz also includes a day-by-day table view of the most recent entries. This allows for a close look at what the treatment is looking like on a daily basis.</p> <p>Finally, I added a special page for hypoglycemia-related statistics, reporting the number and percentage of episodes and a graphical view of the distribution of episodes among danger levels. Hypoglycemia is one of the most dangerous aspects of Type 1 Diabetes, and I feel other softwares don’t go far beyond the simple time-in-range graph. I would say this is one of the most important features in glikoz right now.</p> <h1 id="how-it-was-built">How it was built</h1> <p>I used Python3 for all of glikoz. Since the scope of processing is still very small, and to use it as a proof of concept, Pandas and NumPy are used for data analysis. If you consider that the average user will input about 15 entries every day, we are talking about less than 6 thousand entries (i.e., table rows) in a year, meaning we can allow for even very slow algorithms (think cubic) before starting to worry about execution time.</p> <p>In the future I plan on switching to something distributed, of course, but Pandas will be more than enough in the meantime.</p> <h1 id="plans-for-the-future">Plans for the future</h1> <p>There are, of course, infinite features I want to add to glikoz. One of those that will have to wait a while longer, for example, is reporting analyses with Boukeh, which would allow us to create web-based interactive reports. Another is machine learning-powered analysis to provide insights about the treatment and optimization of insulin dosage parameters based on recent data.</p> <p>The two most important things, though, and these are the ones I’ll be working on next, are documentation and libre integration.</p> <p>I made sure to write readable code with inline documentation (and since a while ago I’ve been doing test-driven development, which helps with that), but I feel glikoz still lacks a textual explanation of its purpose, architecture and backlog. This is not a coding task, which might be the reason for me not having done it yet, but still it’s very important.</p> <p>And the Freestyle Libre integration is probably the most useful thing I can do to access more data. This will allow for minute-by-minute analysis of blood sugar behavior. I’m really looking forward to it. Since this means a lot more data, however, I plan on moving to SQL-powered analysis wherever possible. This will also help in scaling later on.</p> <h1 id="final-remarks">Final remarks</h1> <p>Well, that was it. I truly am excited to continue working on glikoz, and I hope I can learn a lot from these next steps.</p>]]></content><author><name></name></author><category term="python"/><summary type="html"><![CDATA[We officially have a decent version! And plans for the future]]></summary></entry><entry><title type="html">Label Smoothing - what it solves and how it works</title><link href="https://almeidaraul.github.io/blog/2023/label-smoothing/" rel="alternate" type="text/html" title="Label Smoothing - what it solves and how it works"/><published>2023-11-22T18:25:00+00:00</published><updated>2023-11-22T18:25:00+00:00</updated><id>https://almeidaraul.github.io/blog/2023/label-smoothing</id><content type="html" xml:base="https://almeidaraul.github.io/blog/2023/label-smoothing/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>There are two explanations here: a short and a long one. I suggest you read both in this order, as the short one might provide an overview of what is going on.</p> <p>This all comes from the original paper by Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens and Zbigniew Wojna that proposed label smoothing as a regularization technique<d-cite key="resnet"></d-cite>.</p> <blockquote> <p>It is also important to note I am talking exclusively about classification in this article, so when you read “neural networks are fun” you should actually understand “<strong>classifier</strong> neural networks are fun”.</p> </blockquote> <h2 id="tldr-short-explanation">TL;DR (short explanation)</h2> <p>The general idea of optimizing a neural network’s weights during training is that you want the network’s answers for inputs of different classes to be as distant from one another as possible.</p> <p>Labels are usually represented in one-hot encoded vectors, where one value is equal to 1 and all others are equal to 0, representing the probability of each class (and, since this is ground truth, we know one class has probability 1 and all others have probability 0).</p> <p>Intuitively, the problem is that your model could learn to make the probability of the most likely class to be infinitely greater than the others’ (and understandably so, since 1 is infinitely greater than 0). This leads to a model that doesn’t adapt well yet feels pretty confident about its decisions (☢ overfitting, poor generalization ☢).</p> <p>Label smoothing consists of choosing an Epsilon value and changing the ground- truth labels <code class="language-plaintext highlighter-rouge">y</code> as follows: $y = (1-\epsilon)y + \frac{\epsilon}{|y|}$.</p> <p>With this, nothing is infinitely greater than anything anymore, and your model learns to keep outputs adequate.</p> <h2 id="long-explanation">Long explanation</h2> <p>Now for the long explanation. I will follow the general structure of the authors’ explanation<d-cite key="resnet"></d-cite>, but in my eyes this is less straight to the point in order to make it easier to understand. Just like the authors, I will use the cross-entropy (CE) loss in my explanation.</p> <h3 id="the-problem">The problem</h3> <p>Let’s say you’re optimizing a neural network’s weights by minimizing the CE function over the softmax of its outputs and the expected outputs. There are a couple of things to notice here:</p> <ol> <li>Before the softmax function, your neural network outputs logits, which are unnormalized log-probabilities of each class.</li> <li>Logits are normalized with the softmax function so that your neural network’s predicted probability for class <code class="language-plaintext highlighter-rouge">k</code> is $\textrm{SoftMax}_k = \frac{e^{\textrm{logits}_k}}{\sum_i\log(p_k)\textrm{expected}_k}, i \in \textrm{classes}$</li> <li>With <code class="language-plaintext highlighter-rouge">p_j</code> as the predicted probability of class j and <code class="language-plaintext highlighter-rouge">expected_j</code> as the real probability of the same class, $\textrm{CELoss} = -(\sum_{k\in\textrm{classes}}\log(p_k)\textrm{expected}_k )$</li> </ol> <p>So we can conclude that if you’re minimizing CE, you’re aiming to maximize the log-likelihood of the correct label. <strong>You can’t</strong> maximize this with finite values of <code class="language-plaintext highlighter-rouge">logits[k]</code>. You can, however, get pretty close by making <code class="language-plaintext highlighter-rouge">logits[true class] &gt;&gt; logits[i]</code> for all <code class="language-plaintext highlighter-rouge">i != true class</code>, i.e., by making the ground-truth class logit much greater than all others. If you’ve read the short explanation, this is what I meant by “infinitely greater”.</p> <p>Making the ground-truth class logit much greater than all others leads to two problems:</p> <p><strong>Overfitting.</strong> What your model is learning is to assign full probability to the class it expects to be true, which indicates a very strict learned representation.</p> <p><strong>Little adaptation capability.</strong> It is easy to see at this point that your model is encouraged to output logits so that the largest one is a lot different than all others. What’s important to notice here, is that the gradient $\frac{\partial\textrm{CELoss}}{\partial\textrm{true class logits}}$ is in the range $[-1, 1]$, which reduces the model’s ability to adapt. You can see this as encouraging the model to create very radical outputs and then not being able to make corresponding radical corrections in the optimization step (because the gradient doesn’t explode like the weights do).</p> <p>In summary, these two problems mean your <strong>model is too confident,</strong> which is the final problem that label smoothing solves.</p> <h3 id="the-solution">The solution</h3> <p>Now we need to solve this confidence issue with your model. What the authors<d-cite key="resnet"></d-cite> proposed is to change the ground-truth label $y$ as follows: $y = (1-\epsilon)y + \frac{\epsilon}{|y|}$</p> <p>Or,</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y' = (1-epsilon)*y + epsilon/len(y)
</code></pre></div></div> <p>For a chosen <code class="language-plaintext highlighter-rouge">epsilon</code> value. With this change, if the estimated probability of a single class <code class="language-plaintext highlighter-rouge">k</code> gets very close to 1, all others will be very close to 0. Since no probability is “allowed” to actually equal to 0, the softmax output won’t explode, and the computed CE value will be large (i.e., this scenario will be avoided in the optimization process).</p> <p>That’s it! I hope you find this helpful.</p>]]></content><author><name>Raul Almeida</name></author><category term="machine_learning"/><summary type="html"><![CDATA[An intuitive explanation of label smoothing]]></summary></entry><entry><title type="html">Making sense of PyTest imports</title><link href="https://almeidaraul.github.io/blog/2023/pytest-imports/" rel="alternate" type="text/html" title="Making sense of PyTest imports"/><published>2023-11-22T18:10:00+00:00</published><updated>2023-11-22T18:10:00+00:00</updated><id>https://almeidaraul.github.io/blog/2023/pytest-imports</id><content type="html" xml:base="https://almeidaraul.github.io/blog/2023/pytest-imports/"><![CDATA[<p>Python imports can get weird, specially when dealing with tests that are to be kept separate from the application code (i.e., in sibling directories).</p> <p>This is a quick guide on how you can organize your tests with <code class="language-plaintext highlighter-rouge">pytest</code> so that everything works as expected. If <code class="language-plaintext highlighter-rouge">pytest</code> is new for you, check out their <a href="https://docs.pytest.org/en/">docs</a>. PyTest is a framework for writing small, readable tests for python programs.</p> <p>I’ve kept this article as a note to myself and friends, and now I am publishing it online. It is made to be brief, with minimal explanations, because it shows you an example of how to do something pretty simple.</p> <p>Do note that while this is not the only way to make things work, it’s my favorite out of everything I’ve come across before.</p> <h1 id="organizing-pytest-tests">Organizing <code class="language-plaintext highlighter-rouge">pytest</code> tests</h1> <h2 id="the-code">The code</h2> <p>Your code should be organized in packages, and the directory with all the tests should be right next to the package directories.</p> <p>This might sound counterintuitive because the test code from the <code class="language-plaintext highlighter-rouge">tests</code> directory should not be able to reach your package, since it is not in a child directory. The reason this works, in a nutshell, is that <code class="language-plaintext highlighter-rouge">pytest</code> operates on a broader scope.</p> <h3 id="directory-structure">Directory structure</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pkg/
  code.py
tests/
  __init__.py
  test_code.py
</code></pre></div></div> <h3 id="file-structure">File structure</h3> <p>As for your files, you can basically use imports as you would feel the most comfortable doing: from each package you can import a module, or something from this module.</p> <p>The <code class="language-plaintext highlighter-rouge">tests</code> package needs an <code class="language-plaintext highlighter-rouge">__init__</code> file.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># pkg/code.py
</span><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="mi">2</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># tests/__init__.py
# (may be left empty)
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># tests/test_code.py
</span><span class="kn">from</span> <span class="n">pkg.code</span> <span class="kn">import</span> <span class="n">f</span>


<span class="k">def</span> <span class="nf">test_f</span><span class="p">():</span>
    <span class="k">assert</span> <span class="nf">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span>
</code></pre></div></div> <h1 id="the-testing">The testing</h1> <p>Now you can run your tests with the <code class="language-plaintext highlighter-rouge">pytest</code> command. That’s it! 😊</p>]]></content><author><name></name></author><category term="python"/><summary type="html"><![CDATA[Importing things from sibling directories]]></summary></entry></feed>