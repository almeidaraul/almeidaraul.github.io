<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://almeidaraul.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://almeidaraul.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-11-25T18:47:47+00:00</updated><id>https://almeidaraul.github.io/feed.xml</id><title type="html">blank</title><subtitle>Computer Vision Researcher </subtitle><entry><title type="html">Duplicate graph trick (PT-BR)</title><link href="https://almeidaraul.github.io/blog/2023/graph/" rel="alternate" type="text/html" title="Duplicate graph trick (PT-BR)"/><published>2023-11-23T18:25:00+00:00</published><updated>2023-11-23T18:25:00+00:00</updated><id>https://almeidaraul.github.io/blog/2023/graph</id><content type="html" xml:base="https://almeidaraul.github.io/blog/2023/graph/"><![CDATA[<p>üöß em constru√ß√£o</p> <p>Estas s√£o notas que acompanham a oficina que ministrei recentemente no Clube de Programa√ß√£o da UTFPR. Nela, eu apresentei o algoritmo de Dijkstra e um truque simples mas √∫til para resolver problemas no contexto de programa√ß√£o competitiva.</p> <p>Como o truque √© simples, n√£o faz mal adicionar a explica√ß√£o do algoritmo de Dijkstra, mas voc√™ pode consult√°-la em outros lugares como o CP-Algorithms. Os problemas apresentados ser√£o tr√™s, sendo que os dois primeiros t√™m solu√ß√µes mais simples (mas servem para motivos did√°ticos).</p> <h1 id="nota√ß√£o">Nota√ß√£o</h1> <p>Os termos arco e aresta s√£o usados sem distin√ß√£o, bem como dist√¢ncia, peso e custo.</p> <ul> <li>$n$: n√∫mero de v√©rtices</li> <li>$m$: n√∫mero de arestas</li> <li>$E_{i,j}$: peso da aresta $(i, j)$</li> </ul> <h1 id="os-problemas-enunciados-resumidos">Os problemas (enunciados resumidos)</h1> <ul> <li><a href="https://cses.fi/problemset/task/1195">Flight Discount (CSES)</a>: grafo direcionado, arcos com peso, $2 \leq n \leq 10^5$, $1 \leq m \leq 2\times10^5$. Encontre o menor caminho do v√©rtice $1$ ao $n$ sendo que voc√™ pode escolher uma aresta $e$ qualquer e mudar seu peso $E_e$ para $\lfloor\frac{E_e}{2}\rfloor$ (s√≥ pode fazer isso uma vez)</li> <li><a href="https://atcoder.jp/contests/abc325/tasks/abc325_e">Our clients, please wait a moment (AtCoder)</a>: grafo direcionado, arcos com peso, $2 \leq n \leq 1000$, $m = \frac{n(n-1)}{2}$. Encontre o menor caminho do v√©rtice $1$ ao $n$ sendo que, para o caminho escolhido, todos os pesos $E_{i,j}$ valer√£o $E_{i,j}A$ at√© um ponto arbitr√°rio, e a partir da√≠ valer√£o $E_{i,j}B + C$. $1 \leq A, B, C \leq 10^6$</li> <li><a href="https://codeforces.com/contest/1725/problem/M">Moving Both Hands (Codeforces)</a>: grafo direcionado, arcos com peso, $2 \leq n \leq 10^5$, $0 \leq m \leq 2\times10^5$. Para cada v√©rtice $u &gt; 1$, encontre a menor dist√¢ncia para dois objetos se encontrarem seguindo os arcos, sendo que cada um se move de uma vez, um deles est√° no v√©rtice $1$, e o outro est√° no v√©rtice $u$.</li> </ul> <h1 id="dijkstra">Dijkstra</h1> <p>Nos tr√™s problemas n√≥s usaremos o algoritmo de Dijkstra, ent√£o antes de irmos ao truque (e √†s solu√ß√µes) vamos ver este algoritmo em detalhe.</p> <p>O algoritmo de Dijkstra resolve o problema de caminhos m√≠nimos com origem √∫nica (Single-Source Shortest Paths, SSSP) para grafos com arestas de peso n√£o-negativo. Neste problema, dado um v√©rtice de origem, o objetivo √© encontrar a menor dist√¢ncia para cada um dos outros v√©rtices num caminho que come√ßa na origem.</p> <p>Para as explica√ß√µes a seguir, vamos fixar a origem no v√©rtice $1$.</p> <h2 id="intui√ß√£o">Intui√ß√£o</h2> <p>A ideia intuitiva do algoritmo √©: dado um v√©rtice $u$ que com certeza tem caminho m√≠nimo $w$, para cada aresta $(u, v)$, √© poss√≠vel que o menor caminho de $v$ tenha custo $w+E_{u,v}$. Isso equivaleria a dizer que o caminho m√≠nimo de $v$ passa pela aresta $(u, v)$. Posto de outra forma: para cada cara com caminho m√≠nimo definido, vamos tentar descobrir um novo menor caminho para seus vizinhos.</p> <h2 id="algoritmo">Algoritmo</h2> <p>Vamos guardar duas informa√ß√µes para cada v√©rtice $v$: se ele j√° foi processado e qual a menor dist√¢ncia conhecida de $1$ at√© ele ($d_v$). Inicialmente, $d_1 = 0$ e $d_v = \infty \forall v \neq 1$.</p> <p>Para cada passo do algoritmo, vamos escolher o v√©rtice $v$ com o menor $d_v$ entre aqueles que n√£o foram processados ainda, e ent√£o process√°-lo. Processar um v√©rtice $v$ consiste em relaxar todas as arestas $(v, u)$ com a ideia apresentada na se√ß√£o anterior: $d_u = \min(d_u, d_v+E_{v,u})$.</p> <p>√â f√°cil ver que cada v√©rtice s√≥ √© processado uma vez, porque s√≥ processaremos um v√©rtice que n√£o foi processado. Mas por que √© garantido que, ao processar um v√©rtice, j√° temos o menor valor poss√≠vel de $d_v$?</p> <h3 id="como-funciona">Como funciona</h3> <p>Digamos que seja poss√≠vel que, ap√≥s processar o v√©rtice $v$, relaxemos alguma aresta que diminua o valor $d_v$.</p> <p>Se houvesse arestas negativas, poderia acontecer de inserirmos $v$ num ciclo com soma negativa, e a√≠ seria poss√≠vel tornar $d_v = -\infty$ (veja o grafo abaixo). No nosso problema, n√£o h√° arestas negativas.</p> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1700938072732" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width: 317.140625px;" viewBox="0 0 317.140625 98"><style>#mermaid-1700938072732 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1700938072732 .node circle,#mermaid-1700938072732 .node ellipse,#mermaid-1700938072732 .node polygon,#mermaid-1700938072732 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1700938072732 .node.clickable{cursor:pointer}#mermaid-1700938072732 .arrowheadPath{fill:#333}#mermaid-1700938072732 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1700938072732 .edgeLabel{background-color:#e8e8e8}#mermaid-1700938072732 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1700938072732 .cluster text{fill:#333}#mermaid-1700938072732 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1700938072732 .actor{stroke:#ccf;fill:#ececff}#mermaid-1700938072732 text.actor{fill:#000;stroke:none}#mermaid-1700938072732 .actor-line{stroke:grey}#mermaid-1700938072732 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1700938072732 .messageLine0,#mermaid-1700938072732 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1700938072732 #arrowhead{fill:#333}#mermaid-1700938072732 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1700938072732 .messageText{fill:#333;stroke:none}#mermaid-1700938072732 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1700938072732 .labelText,#mermaid-1700938072732 .loopText{fill:#000;stroke:none}#mermaid-1700938072732 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1700938072732 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1700938072732 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1700938072732 .section{stroke:none;opacity:.2}#mermaid-1700938072732 .section0{fill:rgba(102,102,255,.49)}#mermaid-1700938072732 .section2{fill:#fff400}#mermaid-1700938072732 .section1,#mermaid-1700938072732 .section3{fill:#fff;opacity:.2}#mermaid-1700938072732 .sectionTitle0,#mermaid-1700938072732 .sectionTitle1,#mermaid-1700938072732 .sectionTitle2,#mermaid-1700938072732 .sectionTitle3{fill:#333}#mermaid-1700938072732 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1700938072732 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1700938072732 .grid path{stroke-width:0}#mermaid-1700938072732 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1700938072732 .task{stroke-width:2}#mermaid-1700938072732 .taskText{text-anchor:middle;font-size:11px}#mermaid-1700938072732 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1700938072732 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1700938072732 .taskText0,#mermaid-1700938072732 .taskText1,#mermaid-1700938072732 .taskText2,#mermaid-1700938072732 .taskText3{fill:#fff}#mermaid-1700938072732 .task0,#mermaid-1700938072732 .task1,#mermaid-1700938072732 .task2,#mermaid-1700938072732 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1700938072732 .taskTextOutside0,#mermaid-1700938072732 .taskTextOutside1,#mermaid-1700938072732 .taskTextOutside2,#mermaid-1700938072732 .taskTextOutside3{fill:#000}#mermaid-1700938072732 .active0,#mermaid-1700938072732 .active1,#mermaid-1700938072732 .active2,#mermaid-1700938072732 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1700938072732 .activeText0,#mermaid-1700938072732 .activeText1,#mermaid-1700938072732 .activeText2,#mermaid-1700938072732 .activeText3{fill:#000!important}#mermaid-1700938072732 .done0,#mermaid-1700938072732 .done1,#mermaid-1700938072732 .done2,#mermaid-1700938072732 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1700938072732 .doneText0,#mermaid-1700938072732 .doneText1,#mermaid-1700938072732 .doneText2,#mermaid-1700938072732 .doneText3{fill:#000!important}#mermaid-1700938072732 .crit0,#mermaid-1700938072732 .crit1,#mermaid-1700938072732 .crit2,#mermaid-1700938072732 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1700938072732 .activeCrit0,#mermaid-1700938072732 .activeCrit1,#mermaid-1700938072732 .activeCrit2,#mermaid-1700938072732 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1700938072732 .doneCrit0,#mermaid-1700938072732 .doneCrit1,#mermaid-1700938072732 .doneCrit2,#mermaid-1700938072732 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1700938072732 .activeCritText0,#mermaid-1700938072732 .activeCritText1,#mermaid-1700938072732 .activeCritText2,#mermaid-1700938072732 .activeCritText3,#mermaid-1700938072732 .doneCritText0,#mermaid-1700938072732 .doneCritText1,#mermaid-1700938072732 .doneCritText2,#mermaid-1700938072732 .doneCritText3{fill:#000!important}#mermaid-1700938072732 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1700938072732 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1700938072732 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1700938072732 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1700938072732 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1700938072732 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1700938072732 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1700938072732 #compositionEnd,#mermaid-1700938072732 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1700938072732 #aggregationEnd,#mermaid-1700938072732 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1700938072732 #dependencyEnd,#mermaid-1700938072732 #dependencyStart,#mermaid-1700938072732 #extensionEnd,#mermaid-1700938072732 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1700938072732 .branch-label,#mermaid-1700938072732 .commit-id,#mermaid-1700938072732 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1700938072732{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g transform="translate(-12, -12)"><g class="output"><g class="clusters"></g><g class="edgePaths"><g class="edgePath" style="opacity: 1;"><path class="path" d="M48.90625,57.019417475728154L77.90625,39L106.90625,39" marker-end="url(#arrowhead27)" style="fill:none"></path><defs><marker id="arrowhead27" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M135.8125,39L171.4765625,39L207.140625,39" marker-end="url(#arrowhead28)" style="fill:none"></path><defs><marker id="arrowhead28" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M235.140625,39L264.140625,39L293.140625,57.2093023255814" marker-end="url(#arrowhead29)" style="fill:none"></path><defs><marker id="arrowhead29" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M293.140625,74.79069767441861L264.140625,93L221.140625,93L171.4765625,93L121.359375,93L77.90625,93L48.90625,74.98058252427184" marker-end="url(#arrowhead30)" style="fill:none"></path><defs><marker id="arrowhead30" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity: 1;" transform="translate(77.90625,39)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">2</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(171.4765625,39)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">2</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(264.140625,39)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">1</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(171.4765625,93)"><g transform="translate(-10.6640625,-9)" class="label"><foreignObject width="21.328125" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">-10</span></div></foreignObject></g></g></g><g class="nodes"><g class="node" id="1" transform="translate(34.453125,66)" style="opacity: 1;"><rect rx="0" ry="0" x="-14.453125" y="-19" width="28.90625" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">1</div></foreignObject></g></g></g><g class="node" id="b" transform="translate(121.359375,39)" style="opacity: 1;"><rect rx="0" ry="0" x="-14.453125" y="-19" width="28.90625" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">b</div></foreignObject></g></g></g><g class="node" id="v" transform="translate(221.140625,39)" style="opacity: 1;"><rect rx="0" ry="0" x="-14" y="-19" width="28" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-4,-9)"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">v</div></foreignObject></g></g></g><g class="node" id="x" transform="translate(307.140625,66)" style="opacity: 1;"><rect rx="0" ry="0" x="-14" y="-19" width="28" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-4,-9)"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">x</div></foreignObject></g></g></g></g></g></g></svg> </div> <p>Como n√£o h√° arestas negativas, o √∫nico jeito √© se encontrarmos algum v√©rtice $u$ com $d_u &lt; d_v$, onde h√° um caminho de $u$ at√© $v$ com peso $x$ tal que $d_u + x &lt; d_v$. No entanto, como processamos sempre o v√©rtice com menor dist√¢ncia primeiro, e como $d_u &lt; d_v$, n√≥s ter√≠amos processado $u$ antes de $v$.</p> <p>Portanto, ao processar o v√©rtice $v$, <strong>j√° conhecemos o menor valor poss√≠vel para $d_v$.</strong></p> <h3 id="complexidade---observa√ß√µes">Complexidade - observa√ß√µes</h3> <p>Agora, qual ser√° a complexidade desse algoritmo? Come√ßaremos por algumas observa√ß√µes.</p> <h4 id="observa√ß√£o-1-cada-v√©rtice-√©-processado-uma-vez">Observa√ß√£o 1: cada v√©rtice √© processado uma vez</h4> <p>Cada v√©rtice √© processado apenas uma vez, porque n√£o processamos v√©rtices que j√° foram processados. Isso implica em um termo $\mathcal{O}(n)$ em algum lugar na complexidade final.</p> <h4 id="observa√ß√£o-2-cada-aresta-√©-relaxada-uma-vez">Observa√ß√£o 2: cada aresta √© relaxada uma vez</h4> <p>N√≥s relaxaremos uma aresta $(u, v)$ sempre que processarmos o v√©rtice de origem $u$, ou seja, uma vez. Isso implica em um termo $+\mathcal{O}(m)$ em algum lugar na complexidade final (separado do termo anterior).</p> <p>Ignorando as complexidades de escolher o pr√≥ximo v√©rtice a processar e de relaxar uma aresta, temos uma complexidade de $\mathcal{O}(n+m)$.</p> <h4 id="complexidade-e-c√≥digo-para-grafos-densos">Complexidade e c√≥digo para grafos densos</h4> <p>Em grafos densos, o n√∫mero de arestas √© pr√≥ximo do m√°ximo ($\frac{n(n-1)}{2}$). Se guardamos em um vetor booleano $m$ quais v√©rtices j√° foram processados, podemos a cada itera√ß√£o do algoritmo buscar o pr√≥ximo v√©rtice a ser processado em $\mathcal{O}(n)$, relaxando cada aresta em $\mathcal{O}(1)$. Isso significa uma complexidade $\mathcal{O}(n^2 + m) = \mathcal{O}(n^2)$. Para grafos densos, essa complexidade √© √≥tima. Abaixo deixo uma implementa√ß√£o do algoritmo nesse caso:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="n">ii</span> <span class="o">=</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">;</span>
<span class="kt">void</span> <span class="nf">dijkstra</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">ii</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">g</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">const</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">g</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">d</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mh">0x3f3f3f3f</span><span class="p">),</span> <span class="n">m</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
	<span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// escolhe o pr√≥ximo</span>
		<span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">m</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">||</span> <span class="n">d</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">d</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
				<span class="n">v</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
		<span class="c1">// processa</span>
		<span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">u</span><span class="p">]</span><span class="o">:</span> <span class="n">g</span><span class="p">[</span><span class="n">v</span><span class="p">])</span>
			<span class="c1">// relaxa aresta (v, u)</span>
			<span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">],</span> <span class="n">d</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">+</span><span class="n">x</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h4 id="complexidade-e-c√≥digo-para-grafos-esparsos">Complexidade e c√≥digo para grafos esparsos</h4> <p>Quando o n√∫mero de arestas √© muito menor que o m√°ximo poss√≠vel, existe uma varia√ß√£o com desempenho melhor. O que vamos fazer √© guardar em uma estrutura que permita inser√ß√£o de valores e remo√ß√£o de m√≠nimo em tempo logar√≠tmico, e guardar nela pares $(d_v, v)$.</p> <p>A melhoria dessa varia√ß√£o √© que a sele√ß√£o do pr√≥ximo v√©rtice a processar ter√° custo logar√≠tmico, j√° que basta selecionar o menor par na estrutura.</p> <p>Ao mesmo tempo, relaxar uma aresta deixar√° de ser constante, porque ao encontrar um peso menor para o v√©rtice $u$ n√≥s teremos de adicion√°-lo √† estrutura em tempo logar√≠tmico.</p> <p>Com essa altera√ß√£o, a complexidade do algoritmo passa a ser $\mathcal{O}(n\log n + m\log n)$, que √© muito melhor que a anterior no caso de grafos esparsos.</p> <p>A implementa√ß√£o abaixo usa uma fila de prioridade, mas outras estruturas apresentam a mesma complexidade. Com uma <em>fibonacci heap</em> √© poss√≠vel atingir tempo constante na inser√ß√£o e logar√≠tmico na remo√ß√£o, mas como ela √© muito mais dif√≠cil de implementar, n√£o √© t√£o adequada para programa√ß√£o competitiva.</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="n">ii</span> <span class="o">=</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">;</span>
<span class="kt">void</span> <span class="nf">dijkstra</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">ii</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">g</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">const</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">g</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">d</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mh">0x3f3f3f3f</span><span class="p">);</span>
	<span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">ii</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">ii</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">greater</span><span class="o">&lt;</span><span class="n">ii</span><span class="o">&gt;&gt;</span> <span class="n">pq</span><span class="p">;</span>
	<span class="n">pq</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
	<span class="k">while</span> <span class="p">(</span><span class="n">pq</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
		<span class="c1">// escolhe o pr√≥ximo</span>
		<span class="k">auto</span> <span class="p">[</span><span class="n">w</span><span class="p">,</span> <span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">();</span> <span class="n">pq</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">w</span> <span class="o">!=</span> <span class="n">d</span><span class="p">[</span><span class="n">v</span><span class="p">])</span> <span class="c1">// descarta pares desatualizados</span>
			<span class="k">continue</span><span class="p">;</span>
		<span class="c1">// processa</span>
		<span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">u</span><span class="p">]</span><span class="o">:</span> <span class="n">g</span><span class="p">[</span><span class="n">v</span><span class="p">])</span>
			<span class="c1">// relaxa aresta (v, u)</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">w</span><span class="o">+</span><span class="n">x</span><span class="p">)</span>
				<span class="n">pq</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">w</span><span class="o">+</span><span class="n">x</span><span class="p">),</span> <span class="n">u</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h1 id="truque-do-grafo-duplicado">Truque do grafo duplicado</h1> <p>Agora vamos ao truque que √© o ponto central disso tudo. √â uma t√©cnica de modelagem bem simples, que s√≥ merece um nome porque essa p√°gina precisava de um t√≠tulo.</p> <p>A t√©cnica consiste em duplicar o grafo, fazendo com que cada v√©rtice e aresta tenha uma vers√£o ‚Äúoriginal‚Äù e uma ‚Äúmodificada‚Äù. A modifica√ß√£o depende do problema.</p> <p>Al√©m dos v√©rtices e arestas duplicadas, existir√£o arcos de transi√ß√£o entre o ‚Äúgrafo original‚Äù e o ‚Äúgrafo duplicado‚Äù. Isso vai fazer mais sentido quando olharmos para os problemas, mas essencialmente esses arcos de transi√ß√£o representam decis√µes irrevers√≠veis sobre a maneira como se caminha no grafo: a vers√£o duplicada do grafo √© onde voc√™ caminha depois de tomar essas decis√µes.</p> <h1 id="solu√ß√µes-com-o-truque">Solu√ß√µes com o truque</h1> <h2 id="flight-discount">Flight Discount</h2> <p>Esse √© o problema mais simples, com uma solu√ß√£o muito mais simples que essa, mas √© bem f√°cil de pensar com esse truque. Aqui, a vers√£o duplicada do grafo vai ser igual ao grafo original, e os arcos de transi√ß√£o ser√£o os arcos com o desconto aplicado. Dessa maneira, o desconto s√≥ poder√° ser aplicado uma vez em um caminho pelo grafo, porque n√£o existem arcos de retorno para a parte original.</p> <p>Considere este grafo de exemplo:</p> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1700938073125" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width: 246px;" viewBox="0 0 246 54"><style>#mermaid-1700938073125 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1700938073125 .node circle,#mermaid-1700938073125 .node ellipse,#mermaid-1700938073125 .node polygon,#mermaid-1700938073125 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1700938073125 .node.clickable{cursor:pointer}#mermaid-1700938073125 .arrowheadPath{fill:#333}#mermaid-1700938073125 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1700938073125 .edgeLabel{background-color:#e8e8e8}#mermaid-1700938073125 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1700938073125 .cluster text{fill:#333}#mermaid-1700938073125 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1700938073125 .actor{stroke:#ccf;fill:#ececff}#mermaid-1700938073125 text.actor{fill:#000;stroke:none}#mermaid-1700938073125 .actor-line{stroke:grey}#mermaid-1700938073125 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1700938073125 .messageLine0,#mermaid-1700938073125 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1700938073125 #arrowhead{fill:#333}#mermaid-1700938073125 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1700938073125 .messageText{fill:#333;stroke:none}#mermaid-1700938073125 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1700938073125 .labelText,#mermaid-1700938073125 .loopText{fill:#000;stroke:none}#mermaid-1700938073125 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1700938073125 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1700938073125 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1700938073125 .section{stroke:none;opacity:.2}#mermaid-1700938073125 .section0{fill:rgba(102,102,255,.49)}#mermaid-1700938073125 .section2{fill:#fff400}#mermaid-1700938073125 .section1,#mermaid-1700938073125 .section3{fill:#fff;opacity:.2}#mermaid-1700938073125 .sectionTitle0,#mermaid-1700938073125 .sectionTitle1,#mermaid-1700938073125 .sectionTitle2,#mermaid-1700938073125 .sectionTitle3{fill:#333}#mermaid-1700938073125 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1700938073125 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1700938073125 .grid path{stroke-width:0}#mermaid-1700938073125 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1700938073125 .task{stroke-width:2}#mermaid-1700938073125 .taskText{text-anchor:middle;font-size:11px}#mermaid-1700938073125 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1700938073125 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1700938073125 .taskText0,#mermaid-1700938073125 .taskText1,#mermaid-1700938073125 .taskText2,#mermaid-1700938073125 .taskText3{fill:#fff}#mermaid-1700938073125 .task0,#mermaid-1700938073125 .task1,#mermaid-1700938073125 .task2,#mermaid-1700938073125 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1700938073125 .taskTextOutside0,#mermaid-1700938073125 .taskTextOutside1,#mermaid-1700938073125 .taskTextOutside2,#mermaid-1700938073125 .taskTextOutside3{fill:#000}#mermaid-1700938073125 .active0,#mermaid-1700938073125 .active1,#mermaid-1700938073125 .active2,#mermaid-1700938073125 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1700938073125 .activeText0,#mermaid-1700938073125 .activeText1,#mermaid-1700938073125 .activeText2,#mermaid-1700938073125 .activeText3{fill:#000!important}#mermaid-1700938073125 .done0,#mermaid-1700938073125 .done1,#mermaid-1700938073125 .done2,#mermaid-1700938073125 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1700938073125 .doneText0,#mermaid-1700938073125 .doneText1,#mermaid-1700938073125 .doneText2,#mermaid-1700938073125 .doneText3{fill:#000!important}#mermaid-1700938073125 .crit0,#mermaid-1700938073125 .crit1,#mermaid-1700938073125 .crit2,#mermaid-1700938073125 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1700938073125 .activeCrit0,#mermaid-1700938073125 .activeCrit1,#mermaid-1700938073125 .activeCrit2,#mermaid-1700938073125 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1700938073125 .doneCrit0,#mermaid-1700938073125 .doneCrit1,#mermaid-1700938073125 .doneCrit2,#mermaid-1700938073125 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1700938073125 .activeCritText0,#mermaid-1700938073125 .activeCritText1,#mermaid-1700938073125 .activeCritText2,#mermaid-1700938073125 .activeCritText3,#mermaid-1700938073125 .doneCritText0,#mermaid-1700938073125 .doneCritText1,#mermaid-1700938073125 .doneCritText2,#mermaid-1700938073125 .doneCritText3{fill:#000!important}#mermaid-1700938073125 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1700938073125 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1700938073125 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1700938073125 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1700938073125 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1700938073125 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1700938073125 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1700938073125 #compositionEnd,#mermaid-1700938073125 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1700938073125 #aggregationEnd,#mermaid-1700938073125 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1700938073125 #dependencyEnd,#mermaid-1700938073125 #dependencyStart,#mermaid-1700938073125 #extensionEnd,#mermaid-1700938073125 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1700938073125 .branch-label,#mermaid-1700938073125 .commit-id,#mermaid-1700938073125 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1700938073125{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g transform="translate(-12, -12)"><g class="output"><g class="clusters"></g><g class="edgePaths"><g class="edgePath" style="opacity: 1;"><path class="path" d="M58,39L87,39L116,39" marker-end="url(#arrowhead14)" style="fill:none"></path><defs><marker id="arrowhead14" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M154,39L183,39L212,39" marker-end="url(#arrowhead15)" style="fill:none"></path><defs><marker id="arrowhead15" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity: 1;" transform="translate(87,39)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">7</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(183,39)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">4</span></div></foreignObject></g></g></g><g class="nodes"><g class="node" id="id1" transform="translate(39,39)" style="opacity: 1;"><circle x="-14.453125" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">1</div></foreignObject></g></g></g><g class="node" id="id2" transform="translate(135,39)" style="opacity: 1;"><circle x="-14.453125" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">2</div></foreignObject></g></g></g><g class="node" id="id3" transform="translate(231,39)" style="opacity: 1;"><circle x="-14.453125" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">3</div></foreignObject></g></g></g></g></g></g></svg> </div> <p>Com o truque aplicado, ter√≠amos o grafo abaixo. A parte de cima √© id√™ntica ao grafo original, bem como a parte de baixo. Os arcos que levam de cima para baixo correspondem ao desconto aplicado. Note que n√£o h√° arcos de baixo para cima.</p> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1700938073518" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width: 320.9375px;" viewBox="0 0 320.9375 218"><style>#mermaid-1700938073518 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1700938073518 .node circle,#mermaid-1700938073518 .node ellipse,#mermaid-1700938073518 .node polygon,#mermaid-1700938073518 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1700938073518 .node.clickable{cursor:pointer}#mermaid-1700938073518 .arrowheadPath{fill:#333}#mermaid-1700938073518 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1700938073518 .edgeLabel{background-color:#e8e8e8}#mermaid-1700938073518 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1700938073518 .cluster text{fill:#333}#mermaid-1700938073518 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1700938073518 .actor{stroke:#ccf;fill:#ececff}#mermaid-1700938073518 text.actor{fill:#000;stroke:none}#mermaid-1700938073518 .actor-line{stroke:grey}#mermaid-1700938073518 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1700938073518 .messageLine0,#mermaid-1700938073518 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1700938073518 #arrowhead{fill:#333}#mermaid-1700938073518 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1700938073518 .messageText{fill:#333;stroke:none}#mermaid-1700938073518 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1700938073518 .labelText,#mermaid-1700938073518 .loopText{fill:#000;stroke:none}#mermaid-1700938073518 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1700938073518 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1700938073518 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1700938073518 .section{stroke:none;opacity:.2}#mermaid-1700938073518 .section0{fill:rgba(102,102,255,.49)}#mermaid-1700938073518 .section2{fill:#fff400}#mermaid-1700938073518 .section1,#mermaid-1700938073518 .section3{fill:#fff;opacity:.2}#mermaid-1700938073518 .sectionTitle0,#mermaid-1700938073518 .sectionTitle1,#mermaid-1700938073518 .sectionTitle2,#mermaid-1700938073518 .sectionTitle3{fill:#333}#mermaid-1700938073518 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1700938073518 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1700938073518 .grid path{stroke-width:0}#mermaid-1700938073518 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1700938073518 .task{stroke-width:2}#mermaid-1700938073518 .taskText{text-anchor:middle;font-size:11px}#mermaid-1700938073518 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1700938073518 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1700938073518 .taskText0,#mermaid-1700938073518 .taskText1,#mermaid-1700938073518 .taskText2,#mermaid-1700938073518 .taskText3{fill:#fff}#mermaid-1700938073518 .task0,#mermaid-1700938073518 .task1,#mermaid-1700938073518 .task2,#mermaid-1700938073518 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1700938073518 .taskTextOutside0,#mermaid-1700938073518 .taskTextOutside1,#mermaid-1700938073518 .taskTextOutside2,#mermaid-1700938073518 .taskTextOutside3{fill:#000}#mermaid-1700938073518 .active0,#mermaid-1700938073518 .active1,#mermaid-1700938073518 .active2,#mermaid-1700938073518 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1700938073518 .activeText0,#mermaid-1700938073518 .activeText1,#mermaid-1700938073518 .activeText2,#mermaid-1700938073518 .activeText3{fill:#000!important}#mermaid-1700938073518 .done0,#mermaid-1700938073518 .done1,#mermaid-1700938073518 .done2,#mermaid-1700938073518 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1700938073518 .doneText0,#mermaid-1700938073518 .doneText1,#mermaid-1700938073518 .doneText2,#mermaid-1700938073518 .doneText3{fill:#000!important}#mermaid-1700938073518 .crit0,#mermaid-1700938073518 .crit1,#mermaid-1700938073518 .crit2,#mermaid-1700938073518 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1700938073518 .activeCrit0,#mermaid-1700938073518 .activeCrit1,#mermaid-1700938073518 .activeCrit2,#mermaid-1700938073518 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1700938073518 .doneCrit0,#mermaid-1700938073518 .doneCrit1,#mermaid-1700938073518 .doneCrit2,#mermaid-1700938073518 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1700938073518 .activeCritText0,#mermaid-1700938073518 .activeCritText1,#mermaid-1700938073518 .activeCritText2,#mermaid-1700938073518 .activeCritText3,#mermaid-1700938073518 .doneCritText0,#mermaid-1700938073518 .doneCritText1,#mermaid-1700938073518 .doneCritText2,#mermaid-1700938073518 .doneCritText3{fill:#000!important}#mermaid-1700938073518 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1700938073518 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1700938073518 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1700938073518 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1700938073518 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1700938073518 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1700938073518 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1700938073518 #compositionEnd,#mermaid-1700938073518 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1700938073518 #aggregationEnd,#mermaid-1700938073518 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1700938073518 #dependencyEnd,#mermaid-1700938073518 #dependencyStart,#mermaid-1700938073518 #extensionEnd,#mermaid-1700938073518 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1700938073518 .branch-label,#mermaid-1700938073518 .commit-id,#mermaid-1700938073518 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1700938073518{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g transform="translate(-12, -12)"><g class="output"><g class="clusters"></g><g class="edgePaths"><g class="edgePath" style="opacity: 1;"><path class="path" d="M57.273790808414596,71.79725365885457L105.734375,58L153.46875,58" marker-end="url(#arrowhead22)" style="fill:none"></path><defs><marker id="arrowhead22" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M190.7425408084146,52.797253658854565L239.203125,39L286.9375,39" marker-end="url(#arrowhead23)" style="fill:none"></path><defs><marker id="arrowhead23" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M58,203L105.734375,203L154.1949591915854,189.20274634114543" marker-end="url(#arrowhead24)" style="fill:none"></path><defs><marker id="arrowhead24" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M191.46875,184L239.203125,184L287.6637091915854,170.20274634114543" marker-end="url(#arrowhead25)" style="fill:none"></path><defs><marker id="arrowhead25" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M52.816030602950036,90.04290222221834L105.734375,140L156.6062896554785,173.541398190079" marker-end="url(#arrowhead26)" style="fill:none"></path><defs><marker id="arrowhead26" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M188.3312103445215,68.45860180992099L239.203125,102L292.12146939704996,151.95709777778166" marker-end="url(#arrowhead27)" style="fill:none"></path><defs><marker id="arrowhead27" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity: 1;" transform="translate(105.734375,58)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">7</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(239.203125,39)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">4</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(105.734375,203)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">7</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(239.203125,184)"><g transform="translate(-4,-9)" class="label"><foreignObject width="8" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">4</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(105.734375,140)"><g transform="translate(-22.734375,-9)" class="label"><foreignObject width="45.46875" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">7/2 = 3</span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform="translate(239.203125,102)"><g transform="translate(-22.734375,-9)" class="label"><foreignObject width="45.46875" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">4/2 = 2</span></div></foreignObject></g></g></g><g class="nodes"><g class="node" id="id1" transform="translate(39,77)" style="opacity: 1;"><circle x="-14.453125" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">1</div></foreignObject></g></g></g><g class="node" id="id2" transform="translate(172.46875,58)" style="opacity: 1;"><circle x="-14.453125" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">2</div></foreignObject></g></g></g><g class="node" id="id3" transform="translate(305.9375,39)" style="opacity: 1;"><circle x="-14.453125" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-4.453125,-9)"><foreignObject width="8.90625" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">3</div></foreignObject></g></g></g><g class="node" id="id11" transform="translate(39,203)" style="opacity: 1;"><circle x="-15.9765625" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-5.9765625,-9)"><foreignObject width="11.953125" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">1'</div></foreignObject></g></g></g><g class="node" id="id21" transform="translate(172.46875,184)" style="opacity: 1;"><circle x="-15.9765625" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-5.9765625,-9)"><foreignObject width="11.953125" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">2'</div></foreignObject></g></g></g><g class="node" id="id31" transform="translate(305.9375,165)" style="opacity: 1;"><circle x="-15.9765625" y="-19" r="19"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-5.9765625,-9)"><foreignObject width="11.953125" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">3'</div></foreignObject></g></g></g></g></g></g></svg> </div> <p>A implementa√ß√£o dessa solu√ß√£o √© muito simples. O c√≥digo do Dijkstra √© o mesmo, e a constru√ß√£o do grafo √© levemente diferente:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
  <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span> <span class="o">&gt;&gt;</span> <span class="n">c</span><span class="p">;</span>
  <span class="n">g</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>  <span class="c1">// arco conforme na entrada</span>
  <span class="n">g</span><span class="p">[</span><span class="n">a</span><span class="o">+</span><span class="n">n</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">b</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>  <span class="c1">// arco duplicado (parte de "baixo" do grafo)</span>
  <span class="n">g</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">c</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">b</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>  <span class="c1">// arco de transi√ß√£o (desconto)</span>
<span class="p">}</span>
</code></pre></div></div> <p>Neste c√≥digo, n√≥s reservamos os v√©rtices $1 \leq v \leq n$ para o grafo ‚Äúoriginal‚Äù, e os v√©rtices $n+1 \leq v‚Äô \leq 2n$ para o grafo duplicado.</p> <h2 id="our-clients-please-wait-a-moment">Our clients, please wait a moment</h2> <p>A ideia aqui √© muito parecida com a do problema anterior. Dessa vez os arcos de transi√ß√£o ter√£o custo $0$, mas os pesos dos arcos ser√£o diferentes dependendo de em qual parte do grafo voc√™ est√°. O grafo original corresponde ao prefixo do caminho, que √© de carro, e o grafo duplicado corresponde ao sufixo, que √© de trem.</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">d</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">d</span><span class="p">;</span>
    <span class="n">g</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">d</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>  <span class="c1">// custo de carro: A*D(i,j)</span>
    <span class="n">g</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>  <span class="c1">// transi√ß√£o: custo 0</span>
    <span class="n">g</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">n</span><span class="p">].</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">d</span><span class="o">*</span><span class="n">b</span><span class="o">+</span><span class="n">c</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>  <span class="c1">// custo de trem: B*D(i,j) + C</span>
  <span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Raul Almeida</name></author><category term="competitive_programming"/><summary type="html"><![CDATA[A simple graph trick to solve some SSSP problems]]></summary></entry><entry><title type="html">Glikoz update</title><link href="https://almeidaraul.github.io/blog/2023/glikoz/" rel="alternate" type="text/html" title="Glikoz update"/><published>2023-11-22T18:30:00+00:00</published><updated>2023-11-22T18:30:00+00:00</updated><id>https://almeidaraul.github.io/blog/2023/glikoz</id><content type="html" xml:base="https://almeidaraul.github.io/blog/2023/glikoz/"><![CDATA[<blockquote> <p>Check out <a href="https://github.com/almeidaraul/glikoz">Glikoz @ GitHub</a></p> </blockquote> <p>I have just finished pushing some small changes to the main glikoz branch, and finally I can call it something I‚Äôd be okay with using for the rest of my life. This opens up space to doing cool things and making things look better, but first I‚Äôll get into some detail about what are the most important features in glikoz, at least for me.</p> <h1 id="what-we-have">What we have</h1> <p>First of all, glikoz works with exports from a very well-established OSS app for recording blood sugar and other relevant information, namely Diaguard. This was very important for me from the beginning, coming from proprietary software that was very restrictive in letting users access their own data in a raw format.</p> <p>With that data, we have all the basic analyses. It is always important for a doctor and their diabetic patients to keep track of how their Time in Range and HbA1c are going. Glikoz reports both the time in range and the estimated HbA1c (you can find references on how the HbA1c is estimated in the GitHub repository). Besides that, the usage of test strips, lancets and fast-acting insulin is reported to help with managing the use of these very expensive resources.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/glikoz1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/glikoz1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/glikoz1-1400.webp"/> <img src="/assets/img/glikoz1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/glikoz2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/glikoz2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/glikoz2-1400.webp"/> <img src="/assets/img/glikoz2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 24-hour graphs for mean glucose and time-specific time in range. </div> <p>There is also a 24 hour graph with the mean glucose by hour and the reported minimum/maximum as well, and another that presents the Time in Range for each hour instead of all the entries. These are both very important for a less-biased, in-depth review of blood sugar behaviour.</p> <p>For the PDF reports to be useful in actual day-to-day patient data analysis, glikoz also includes a day-by-day table view of the most recent entries. This allows for a close look at what the treatment is looking like on a daily basis.</p> <p>Finally, I added a special page for hypoglycemia-related statistics, reporting the number and percentage of episodes and a graphical view of the distribution of episodes among danger levels. Hypoglycemia is one of the most dangerous aspects of Type 1 Diabetes, and I feel other softwares don‚Äôt go far beyond the simple time-in-range graph. I would say this is one of the most important features in glikoz right now.</p> <h1 id="how-it-was-built">How it was built</h1> <p>I used Python3 for all of glikoz. Since the scope of processing is still very small, and to use it as a proof of concept, Pandas and NumPy are used for data analysis. If you consider that the average user will input about 15 entries every day, we are talking about less than 6 thousand entries (i.e., table rows) in a year, meaning we can allow for even very slow algorithms (think cubic) before starting to worry about execution time.</p> <p>In the future I plan on switching to something distributed, of course, but Pandas will be more than enough in the meantime.</p> <h1 id="plans-for-the-future">Plans for the future</h1> <p>There are, of course, infinite features I want to add to glikoz. One of those that will have to wait a while longer, for example, is reporting analyses with Boukeh, which would allow us to create web-based interactive reports. Another is machine learning-powered analysis to provide insights about the treatment and optimization of insulin dosage parameters based on recent data.</p> <p>The two most important things, though, and these are the ones I‚Äôll be working on next, are documentation and libre integration.</p> <p>I made sure to write readable code with inline documentation (and since a while ago I‚Äôve been doing test-driven development, which helps with that), but I feel glikoz still lacks a textual explanation of its purpose, architecture and backlog. This is not a coding task, which might be the reason for me not having done it yet, but still it‚Äôs very important.</p> <p>And the Freestyle Libre integration is probably the most useful thing I can do to access more data. This will allow for minute-by-minute analysis of blood sugar behavior. I‚Äôm really looking forward to it. Since this means a lot more data, however, I plan on moving to SQL-powered analysis wherever possible. This will also help in scaling later on.</p> <h1 id="final-remarks">Final remarks</h1> <p>Well, that was it. I truly am excited to continue working on glikoz, and I hope I can learn a lot from these next steps.</p>]]></content><author><name></name></author><category term="python"/><summary type="html"><![CDATA[We officially have a decent version! And plans for the future]]></summary></entry><entry><title type="html">Label Smoothing - what it solves and how it works</title><link href="https://almeidaraul.github.io/blog/2023/label-smoothing/" rel="alternate" type="text/html" title="Label Smoothing - what it solves and how it works"/><published>2023-11-22T18:25:00+00:00</published><updated>2023-11-22T18:25:00+00:00</updated><id>https://almeidaraul.github.io/blog/2023/label-smoothing</id><content type="html" xml:base="https://almeidaraul.github.io/blog/2023/label-smoothing/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>There are two explanations here: a short and a long one. I suggest you read both in this order, as the short one might provide an overview of what is going on.</p> <p>This all comes from the original paper by Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens and Zbigniew Wojna that proposed label smoothing as a regularization technique<d-cite key="resnet"></d-cite>.</p> <blockquote> <p>It is also important to note I am talking exclusively about classification in this article, so when you read ‚Äúneural networks are fun‚Äù you should actually understand ‚Äú<strong>classifier</strong> neural networks are fun‚Äù.</p> </blockquote> <h2 id="tldr-short-explanation">TL;DR (short explanation)</h2> <p>The general idea of optimizing a neural network‚Äôs weights during training is that you want the network‚Äôs answers for inputs of different classes to be as distant from one another as possible.</p> <p>Labels are usually represented in one-hot encoded vectors, where one value is equal to 1 and all others are equal to 0, representing the probability of each class (and, since this is ground truth, we know one class has probability 1 and all others have probability 0).</p> <p>Intuitively, the problem is that your model could learn to make the probability of the most likely class to be infinitely greater than the others‚Äô (and understandably so, since 1 is infinitely greater than 0). This leads to a model that doesn‚Äôt adapt well yet feels pretty confident about its decisions (‚ò¢ overfitting, poor generalization ‚ò¢).</p> <p>Label smoothing consists of choosing an Epsilon value and changing the ground- truth labels <code class="language-plaintext highlighter-rouge">y</code> as follows: $y = (1-\epsilon)y + \frac{\epsilon}{|y|}$.</p> <p>With this, nothing is infinitely greater than anything anymore, and your model learns to keep outputs adequate.</p> <h2 id="long-explanation">Long explanation</h2> <p>Now for the long explanation. I will follow the general structure of the authors‚Äô explanation<d-cite key="resnet"></d-cite>, but in my eyes this is less straight to the point in order to make it easier to understand. Just like the authors, I will use the cross-entropy (CE) loss in my explanation.</p> <h3 id="the-problem">The problem</h3> <p>Let‚Äôs say you‚Äôre optimizing a neural network‚Äôs weights by minimizing the CE function over the softmax of its outputs and the expected outputs. There are a couple of things to notice here:</p> <ol> <li>Before the softmax function, your neural network outputs logits, which are unnormalized log-probabilities of each class.</li> <li>Logits are normalized with the softmax function so that your neural network‚Äôs predicted probability for class <code class="language-plaintext highlighter-rouge">k</code> is $\textrm{SoftMax}_k = \frac{e^{\textrm{logits}_k}}{\sum_i\log(p_k)\textrm{expected}_k}, i \in \textrm{classes}$</li> <li>With <code class="language-plaintext highlighter-rouge">p_j</code> as the predicted probability of class j and <code class="language-plaintext highlighter-rouge">expected_j</code> as the real probability of the same class, $\textrm{CELoss} = -(\sum_{k\in\textrm{classes}}\log(p_k)\textrm{expected}_k )$</li> </ol> <p>So we can conclude that if you‚Äôre minimizing CE, you‚Äôre aiming to maximize the log-likelihood of the correct label. <strong>You can‚Äôt</strong> maximize this with finite values of <code class="language-plaintext highlighter-rouge">logits[k]</code>. You can, however, get pretty close by making <code class="language-plaintext highlighter-rouge">logits[true class] &gt;&gt; logits[i]</code> for all <code class="language-plaintext highlighter-rouge">i != true class</code>, i.e., by making the ground-truth class logit much greater than all others. If you‚Äôve read the short explanation, this is what I meant by ‚Äúinfinitely greater‚Äù.</p> <p>Making the ground-truth class logit much greater than all others leads to two problems:</p> <p><strong>Overfitting.</strong> What your model is learning is to assign full probability to the class it expects to be true, which indicates a very strict learned representation.</p> <p><strong>Little adaptation capability.</strong> It is easy to see at this point that your model is encouraged to output logits so that the largest one is a lot different than all others. What‚Äôs important to notice here, is that the gradient $\frac{\partial\textrm{CELoss}}{\partial\textrm{true class logits}}$ is in the range $[-1, 1]$, which reduces the model‚Äôs ability to adapt. You can see this as encouraging the model to create very radical outputs and then not being able to make corresponding radical corrections in the optimization step (because the gradient doesn‚Äôt explode like the weights do).</p> <p>In summary, these two problems mean your <strong>model is too confident,</strong> which is the final problem that label smoothing solves.</p> <h3 id="the-solution">The solution</h3> <p>Now we need to solve this confidence issue with your model. What the authors<d-cite key="resnet"></d-cite> proposed is to change the ground-truth label $y$ as follows: $y = (1-\epsilon)y + \frac{\epsilon}{|y|}$</p> <p>Or,</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y' = (1-epsilon)*y + epsilon/len(y)
</code></pre></div></div> <p>For a chosen <code class="language-plaintext highlighter-rouge">epsilon</code> value. With this change, if the estimated probability of a single class <code class="language-plaintext highlighter-rouge">k</code> gets very close to 1, all others will be very close to 0. Since no probability is ‚Äúallowed‚Äù to actually equal to 0, the softmax output won‚Äôt explode, and the computed CE value will be large (i.e., this scenario will be avoided in the optimization process).</p> <p>That‚Äôs it! I hope you find this helpful.</p>]]></content><author><name>Raul Almeida</name></author><category term="machine_learning"/><summary type="html"><![CDATA[An intuitive explanation of label smoothing]]></summary></entry><entry><title type="html">Making sense of PyTest imports</title><link href="https://almeidaraul.github.io/blog/2023/pytest-imports/" rel="alternate" type="text/html" title="Making sense of PyTest imports"/><published>2023-11-22T18:10:00+00:00</published><updated>2023-11-22T18:10:00+00:00</updated><id>https://almeidaraul.github.io/blog/2023/pytest-imports</id><content type="html" xml:base="https://almeidaraul.github.io/blog/2023/pytest-imports/"><![CDATA[<p>Python imports can get weird, specially when dealing with tests that are to be kept separate from the application code (i.e., in sibling directories).</p> <p>This is a quick guide on how you can organize your tests with <code class="language-plaintext highlighter-rouge">pytest</code> so that everything works as expected. If <code class="language-plaintext highlighter-rouge">pytest</code> is new for you, check out their <a href="https://docs.pytest.org/en/">docs</a>. PyTest is a framework for writing small, readable tests for python programs.</p> <p>I‚Äôve kept this article as a note to myself and friends, and now I am publishing it online. It is made to be brief, with minimal explanations, because it shows you an example of how to do something pretty simple.</p> <p>Do note that while this is not the only way to make things work, it‚Äôs my favorite out of everything I‚Äôve come across before.</p> <h1 id="organizing-pytest-tests">Organizing <code class="language-plaintext highlighter-rouge">pytest</code> tests</h1> <h2 id="the-code">The code</h2> <p>Your code should be organized in packages, and the directory with all the tests should be right next to the package directories.</p> <p>This might sound counterintuitive because the test code from the <code class="language-plaintext highlighter-rouge">tests</code> directory should not be able to reach your package, since it is not in a child directory. The reason this works, in a nutshell, is that <code class="language-plaintext highlighter-rouge">pytest</code> operates on a broader scope.</p> <h3 id="directory-structure">Directory structure</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pkg/
  code.py
tests/
  __init__.py
  test_code.py
</code></pre></div></div> <h3 id="file-structure">File structure</h3> <p>As for your files, you can basically use imports as you would feel the most comfortable doing: from each package you can import a module, or something from this module.</p> <p>The <code class="language-plaintext highlighter-rouge">tests</code> package needs an <code class="language-plaintext highlighter-rouge">__init__</code> file.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># pkg/code.py
</span><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="mi">2</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># tests/__init__.py
# (may be left empty)
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># tests/test_code.py
</span><span class="kn">from</span> <span class="n">pkg.code</span> <span class="kn">import</span> <span class="n">f</span>


<span class="k">def</span> <span class="nf">test_f</span><span class="p">():</span>
    <span class="k">assert</span> <span class="nf">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span>
</code></pre></div></div> <h1 id="the-testing">The testing</h1> <p>Now you can run your tests with the <code class="language-plaintext highlighter-rouge">pytest</code> command. That‚Äôs it! üòä</p>]]></content><author><name></name></author><category term="python"/><summary type="html"><![CDATA[Importing things from sibling directories]]></summary></entry><entry><title type="html">posts to do</title><link href="https://almeidaraul.github.io/blog/2023/post-bibliography/" rel="alternate" type="text/html" title="posts to do"/><published>2023-08-27T22:30:00+00:00</published><updated>2023-08-27T22:30:00+00:00</updated><id>https://almeidaraul.github.io/blog/2023/post-bibliography</id><content type="html" xml:base="https://almeidaraul.github.io/blog/2023/post-bibliography/"><![CDATA[<p>Posts that I plan on writing/posting here (for those already written):</p> <ul> <li>Explanation of the SemEval paper</li> <li>Making sense of PyTest imports</li> <li>Finding/reading AI papers</li> <li>Label smoothing, explained</li> <li>Early stopping aux (as a post explaining early stopping)</li> <li>Please use markdown</li> <li>something about icpc br reg 2023 (campo grande)</li> </ul>]]></content><author><name></name></author><category term="todo"/><summary type="html"><![CDATA[posts that I plan on writing]]></summary></entry></feed>